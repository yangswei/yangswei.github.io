<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>杨世威</title>
    <description>欢迎来到我的个人站~</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 09 Nov 2018 17:22:20 +0800</pubDate>
    <lastBuildDate>Fri, 09 Nov 2018 17:22:20 +0800</lastBuildDate>
    <generator>Jekyll v3.5.2</generator>
    
      <item>
        <title>科学上网</title>
        <description>&lt;h2 id=&quot;安装&quot;&gt;安装：&lt;/h2&gt;

&lt;p&gt;linux服务器服务端(在国外服务器上执行)&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;wget --no-check-certificate https://freed.ga/github/shadowsocksR.sh; bash shadowsocksR.sh&lt;/code&gt;&lt;br /&gt;
执行完成后监听端口为执行过程中的默认端口&lt;br /&gt;
在客户端按脚本输出信息配置连接信息&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;客户端下载地址:&lt;br /&gt;
&lt;a href=&quot;href=&amp;quot;https://freed.ga/ShadowSocksR/ShadowsocksR-4.7.0.zip&amp;quot;&quot;&gt;windows&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://freed.ga/ShadowSocksR/shadowsocksr-release.apk&quot;&gt;android&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://freed.ga/ShadowSocksR/macOS%20Sierra%2010.10.x.zip&quot;&gt;mac&lt;/a&gt;&lt;br /&gt;
ios的到appstore找一个,目前貌似大部分要收费了~&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;原理&quot;&gt;原理：&lt;/h2&gt;

&lt;p&gt;转自: &lt;a href=&quot;https://vc2tea.com/whats-shadowsocks/&quot;&gt;https://vc2tea.com/whats-shadowsocks/&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;很久前，访问google的方式&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/netcont/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;被墙&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/netcont/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;初代解决方法,利用海外服务器直接代理&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/netcont/3.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
1 首先用户和境外服务器基于ssh建立起一条加密的通道&lt;br /&gt;
2-3 用户通过建立起的隧道进行代理,通过ssh server向真实的服务发起请求&lt;br /&gt;
4-5 服务通过ssh server,再通过创建好的隧道返回给用户&lt;br /&gt;
由于ssh本身就是基于RSA加密技术,所以GFW无法从数据传输的过程中的加密数据内容进行关键词分析,避免了被重置链接的问题,但由于创建隧道和数据传输的过程中,ssh本身的特征是明显的,所以GFW一度通过分析连接的特征进行干扰,导致ssh存在被定向进行干扰的问题&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Shadowsocks原理:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/netcont/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;简单理解的话,shadowsocks是将原来ssh创建的Socks5协议拆开成server端和client端，所以下面这个原理图基本上和利用ssh tunnel大致类似&lt;br /&gt;
1&amp;amp;6 客户端发出的请求基于Socks5协议跟ss-local端进行通讯,由于这个ss-local一般是本机或路由器或局域网的其他机器,不经过GFW,所以解决了上面被GFW通过特征分析进行干扰的问题&lt;br /&gt;
2&amp;amp;5 ss-local和ss-server两端通过多种可选的加密方法进行通讯,经过GFW的时候是常规的TCP包,没有明显的特征码而且GFW也无法对通讯数据进行解密&lt;br /&gt;
3&amp;amp;4 ss-server将收到的加密数据进行解密,还原原来的请求,再发送到用户需要访问的服务,获取响应原路返回&lt;/p&gt;
</description>
        <pubDate>Fri, 09 Nov 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/11/netcon/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/11/netcon/</guid>
        
        <category>tools</category>
        
        
      </item>
    
      <item>
        <title>基础企业级Linux优化整理</title>
        <description>&lt;h1 id=&quot;生产环境优化&quot;&gt;生产环境优化&lt;/h1&gt;

&lt;h2 id=&quot;开机启动&quot;&gt;开机启动&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;chkconfig --list|grep 3:on&lt;/code&gt;查看当前开机开启服务
&lt;br /&gt;
关闭其他开机启动的服务&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;i &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;chkconfig --list|grep &lt;span class=&quot;s1&quot;&gt;'3:on'&lt;/span&gt;|awk &lt;span class=&quot;s1&quot;&gt;'{print $1}'&lt;/span&gt;|grep -vE &lt;span class=&quot;s2&quot;&gt;&quot;crond|network|sshd|rsyslog|sysstat&quot;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;;&lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;chkconfig &lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt; off;done
&lt;span class=&quot;c&quot;&gt;#执行完以后再查看一下开机启动的服务&lt;/span&gt;
chkconfig --list|grep 3:on

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
其他开机启动服务原则是：只保留使用的服务，清楚系统上每个服务的角色，最小化系统服务。&lt;/p&gt;

&lt;h2 id=&quot;防火墙&quot;&gt;防火墙&lt;/h2&gt;
&lt;p&gt;防火墙个人学习或者企业级高并发高流量服务器一般都不开启，因为开启防火墙会有较大的性能损耗，解决此类问题及在更前端用硬件防火墙进行安全防护
&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/init.d/iptables stop&lt;/code&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;远程连接&quot;&gt;远程连接&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;linux系统配置修改后恢复比较麻烦，建议修改配置前备份一份，如果容易忘记，则设置一下命令别名
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vim /etc/profile
&lt;span class=&quot;c&quot;&gt;#在末尾添加一行alias，这样每次vim会自动在vim的目录创建一个备份&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;vim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'func() { cp -f  $1 $1-bk; vim $1;}; func'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; /etc/profile
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;修改配置&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;vim /etc/ssh/sshd_config&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;参数&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Port&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;设置远程连接端口,默认22&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PermitEmptyPasswords&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;远程用户空密码登录，设置为no&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PermitRootLogin&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;是否允许root用户直接登录,设置为no&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;UseDNS no&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;是否反向解析ip,设置为no&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GSSAPIAuthentication no&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;解决慢连接&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/init.d/sshd reload&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;权限管理&quot;&gt;权限管理&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;visudo
在文件的98行给对应普通用户加权限
用户名|机器&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;授权角色&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;|可执行命令
xxx &lt;span class=&quot;nv&quot;&gt;ALL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;ALL&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; NOPASSWD: ALL 
表示xxx 可通过sudo 执行所以系统命令，并不需要密码提示
最后的ALL表示所有命令，可指定某些命令，用逗号隔开
xxx &lt;span class=&quot;nv&quot;&gt;ALL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;ALL&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; NOPASSWD: vim,cp,find
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;关键系统文件上锁&quot;&gt;关键系统文件上锁&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#上锁&lt;/span&gt;
chattr +i /etc/passwd /etc/shadow /etc/group /etc/gshadow /etc/inittab
&lt;span class=&quot;c&quot;&gt;#解锁&lt;/span&gt;
chattr -i /etc/passwd /etc/shadow /etc/group /etc/gshadow /etc/inittab
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;升级已知漏洞软件版本&quot;&gt;升级已知漏洞软件版本&lt;/h2&gt;
&lt;p&gt;升级到最新&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;openssl&lt;/li&gt;
  &lt;li&gt;openssh&lt;/li&gt;
  &lt;li&gt;bash&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;内核优化&quot;&gt;内核优化&lt;/h2&gt;
&lt;p&gt;内核部分根据实际需要优化&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;参数名&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;默认值&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;建议值&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;tcp_syn_retries&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;对外TCP连接请求时,内核尝试发送syn请求的次数,默认5次大概180秒，对内请求是由参数tcp_retries1控制&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;tcp_synack_retries&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;对外TCP的第二步，尝试发送SYN +ACK次数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;tcp_keepalive_time&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;7200&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1800&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;当网络两端建立了TCP连接之后，闲置tcp_keepalive_time时间后，内核会向客户端发送侦测包判断tcp连接情况&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;tcp_keepalive_probes&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;9&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;内核会向客户端发送tcp_keepalive_probes次侦测包判断tcp连接情况&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;tcp_keepalive_intvl&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;75&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;15&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;内核向客户端发送侦测包未获得响应时,隔tcp_keepalive_intvl时间,再发一次侦测&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;tcp_retries1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;放弃回应一个TCP连接请求前,进行tcp_retries1次重试,最低为3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;tcp_retries2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;15&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;丢弃已建立的tcp前,进行多少次重试&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;tcp_orphan_retries&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;7&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;在近端丢弃TCP前，重试多少次&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;tcp_fin_timeout&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;60&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;对于本端断开的socket连接，TCP保持的时间&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;tcp_max_tw_buckets&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;180000&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;36000&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;系统在同时所处理的最大timewait sockets数目&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;tcp_tw_recycle&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;快速TIME-WAIT sockets回收&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;tcp_tw_reuse&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;表示是否允许重新应用处于TIME-WAIT状态的socket用于新的TCP连接&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;tcp_max_orphans&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;8192&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;32768&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;系统所能处理不属于任何进程的TCP sockets最大数量,超过这个数量﹐那么不属于任何进程的连接会被立即reset，并同时显示警告信息&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;tcp_syncookies&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;只有在内核编译时选择了CONFIG_SYNCOOKIES时才会发生作用。当出现syn等候队列出现溢出时象对方发送syncookies。目的是为了防止syn flood攻击&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;tcp_max_syn_backlog&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1024&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;16384&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;对于那些依然还未获得客户端确认的连接请求﹐需要保存在队列中最大数目&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;tcp_reordering&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;6&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;TCP流中重排序的数据报最大数量&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;tcp_retrans_collapse&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;对于某些有bug的打印机提供针对其bug的兼容性&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;tcp_wmem：mindefaultmax&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4096/16384/131072&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;8192/131072/16777216&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;发送缓存设置&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;tcp_rmem：mindefaultmax&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4096/16384/131072&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;8192/131072/16777216&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;接收缓存设置&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;tcp_mem：mindefaultmax&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;内存计算&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;786432/1048576/1572864&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ip_local_port_range:minmax&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;32768/61000&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1024/65000&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;表示用于向外连接的端口范围&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;netdev_max_backlog&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1024&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;16384&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;每个网络接口接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包的最大数目，对重负载服务器而言，该值需要调高一点&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;somaxconn&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;128&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;16384&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;用来限制监听(LISTEN)队列最大数据包的数量，超过这个数量就会导致链接超时或者触发重传机制&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;rmem_max&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;129024&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;873200&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;最大的TCP数据接收缓冲&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;wmem_max&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;129024&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;873200&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;最大的TCP数据发送缓冲&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat /etc/sysctl.conf 

net.ipv4.tcp_syn_retries &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1
net.ipv4.tcp_synack_retries &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1
net.ipv4.tcp_keepalive_time &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 600
net.ipv4.tcp_keepalive_probes &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 3
net.ipv4.tcp_keepalive_intvl &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;15
net.ipv4.tcp_retries2 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 5
net.ipv4.tcp_fin_timeout &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 2
net.ipv4.tcp_max_tw_buckets &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 36000
net.ipv4.tcp_tw_recycle &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1
net.ipv4.tcp_tw_reuse &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1
net.ipv4.tcp_max_orphans &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 32768
net.ipv4.tcp_syncookies &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1
net.ipv4.tcp_max_syn_backlog &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 16384
net.ipv4.tcp_wmem &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 8192 131072 16777216
net.ipv4.tcp_rmem &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 32768 131072 16777216
net.ipv4.tcp_mem &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 786432 1048576 1572864
net.ipv4.ip_local_port_range &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1024 65000
net.ipv4.ip_conntrack_max &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 65536
net.ipv4.netfilter.ip_conntrack_max&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;65536
net.ipv4.netfilter.ip_conntrack_tcp_timeout_established&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;180
net.core.somaxconn &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 16384
net.core.netdev_max_backlog &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 16384
vm.swappiness&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Tue, 06 Nov 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/11/linux/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/11/linux/</guid>
        
        <category>linux</category>
        
        
      </item>
    
      <item>
        <title>博客添加live2d</title>
        <description>&lt;h1 id=&quot;为博客添加女朋友&quot;&gt;为博客添加女朋友&lt;/h1&gt;

&lt;h2 id=&quot;下载live2d-models-库&quot;&gt;下载live2d models 库&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/xiazeyu/live2d-widget-models&quot;&gt;github地址&lt;/a&gt;&lt;br /&gt;
下载live2d库，&lt;a href=&quot;https://huaji8.top/post/live2d-plugin-2.0/&quot;&gt;查看预览图&lt;/a&gt;&lt;br /&gt;
选择一个models,记住名字，下面的models名字均以z16为例，选择其他名字替换z16即可 
在live2d-widget-models目录下，npm install live2d-widget-model-z16&lt;/p&gt;

&lt;h2 id=&quot;生成静态的文件&quot;&gt;生成静态的文件&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install hexo-cli -g
hexo init blog
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;blog
npm install
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;进入blog目录，安装hexo-helper-live2d，&lt;a href=&quot;https://github.com/EYHN/hexo-helper-live2d&quot;&gt;链接&lt;/a&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install --save hexo-helper-live2d&lt;/code&gt;&lt;br /&gt;
如果不成功：&lt;code class=&quot;highlighter-rouge&quot;&gt;yarn add hexo-helper-live2d&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;修改_config.xml&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;live2d&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;enable&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;scriptFrom&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;local&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;pluginRootPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;live2dw/&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;pluginJsPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;lib/&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;pluginModelPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;assets/&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;tagMode&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;z16&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;right&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;150&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;300&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;mobile&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;除了model.use的名字，根据选择的model名外，其他的配置保持不变&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;拷贝文件到hexo中&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;blog
mkdir live2d_models &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;live2d_models &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; mkdir z16 
&lt;span class=&quot;c&quot;&gt;#将live2d-widget-models目录下live2d-widget-model-z16/assets/下的文件拷贝到 blog/live2d_models/z16下&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;将目录拷贝到blog的live2d_models下后执行&lt;strong&gt;hexo serve&lt;/strong&gt;查看是否已经有了z16&lt;br /&gt;
在blog目录，执行&lt;strong&gt;hexo deploy&lt;/strong&gt;&lt;br /&gt;
生成的静态文件在blog/public/live2d下&lt;br /&gt;
引用文件在index.html中&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;静态文件导入jeklly&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cp blog/public/live2d    jeklly-blog的根目录&lt;/code&gt;
将hexo的index.html的引用文件添加到jeklly的footer.html中&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/live2dw/lib/L2Dwidget.min.js?0c58a1486de42ac6cc1c59c7d98ae887&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;L2Dwidget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;pluginRootPath&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;live2dw/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;pluginJsPath&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lib/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;pluginModelPath&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;assets/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tagMode&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;debug&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;model&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;jsonPath&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/live2dw/assets/z16.model.json&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;display&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;position&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;right&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;width&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;height&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mobile&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;show&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;log&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;完成。&lt;/p&gt;
</description>
        <pubDate>Thu, 01 Nov 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/11/live2d/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/11/live2d/</guid>
        
        <category>blog</category>
        
        
      </item>
    
      <item>
        <title>K8s集群-fek插件</title>
        <description>&lt;h2 id=&quot;安装插件前准备工作&quot;&gt;安装插件前准备工作&lt;/h2&gt;

&lt;p&gt;github地址: &lt;a href=&quot;https://github.com/kubernetes/kubernetes&quot;&gt;https://github.com/kubernetes/kubernetes&lt;/a&gt;&lt;br /&gt;
路径为kubenetes/cluster/addons/fluentd-elasticsearch&lt;/p&gt;

&lt;p&gt;选择对应版本的k8s分支,然后下载对应的es,fluentd,kibana的yaml文件，一共6个文件。&lt;br /&gt;
在github上提供了官方的image地址:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;k8s.gcr.io/elasticsearch:v5.6.4
k8s.gcr.io/fluentd-elasticsearch:v2.0.4
docker.elastic.co/kibana/kibana:5.6.4
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这些镜像貌似都被墙了，可以翻墙将镜像下载到本地，然后调整yaml的iamge地址，或者找找一些大牛将这些镜像放到国内cdn提供下载的地址。&lt;br /&gt;
另外在gihub里面提供了完整的dockerfile，可以自定义编辑镜像,如果要使用额外的plugin插件，则在fluentd的Gemfile中将要额外增加的插件添加进去，然后本地build镜像。&lt;/p&gt;

&lt;h3 id=&quot;调整文件&quot;&gt;调整文件&lt;/h3&gt;

&lt;p&gt;fluentd会根据配置文件&lt;code class=&quot;highlighter-rouge&quot;&gt;fluentd-es-configmap.yaml&lt;/code&gt;指定的规则收集系统日志，然后按规定格式打到els中，kibana读取els日志前端展示 &lt;br /&gt;
Fluentd+elasticsearch+kibana中配置相对复杂一些的就是fluentd。
设置node节点的标签,只在标记了标签的节点上运行fluentd&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl get nodes&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl label nodes nodenamexxx beta.kubernetes.io/fluentd-ds-ready=true&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;调整默认kibana的yaml文件,设置type为NodePort然后指定nodeport&lt;br /&gt;
调整elasticsearch的statefulset文件，调整limits&amp;amp;requests的cpu，按实际的需要来进行调整大小（至少2G+）&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;curl ip:9200/_cat/indices?v&lt;/code&gt;&lt;br /&gt;
内存不够时，索引的状态会&lt;strong&gt;red&lt;/strong&gt;,单节点的els索引状态为&lt;strong&gt;yellow&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;按实际需要调整fluentd的configmap&quot;&gt;按实际需要调整fluentd的configmap&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;k8s组件&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;日志内容&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;kube-controller-manager&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;pod扩容或rc&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;kube-scheduler&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;pod扩容或rc&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;kubelet&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;pod周期相关：创建、停止&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;k8s组件收集的日志是k8s集群的日志，实际的应用场景中，需要查看的是k8s集群中对应的服务打印出来的日志，在Linux系统上systemd系统来管理kubernetes服务，并且journal系统会接管服务程序的输出日志，可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;journalctl -u docker -o json-pretty -f&lt;/code&gt;来查看服务的日志.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;__CURSOR&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;xxx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;__REALTIME_TIMESTAMP&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;xxx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;__MONOTONIC_TIMESTAMP&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;xx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;_BOOT_ID&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;xx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;PRIORITY&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;x&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;_UID&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;_GID&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;_CAP_EFFECTIVE&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;xx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;_SYSTEMD_CGROUP&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;xx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;_MACHINE_ID&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;xx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;_HOSTNAME&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;xxx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;_TRANSPORT&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;xx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;SYSLOG_FACILITY&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;_STREAM_ID&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;xx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;SYSLOG_IDENTIFIER&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;xx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;_PID&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;xx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;_COMM&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dockerd-current&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;_EXE&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;xx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;_CMDLINE&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;xx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;_SYSTEMD_UNIT&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;xx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;MESSAGE&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;xx&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;fluentd-configmap指定源数据，匹配所有系统日志中_COMM值为&lt;code class=&quot;highlighter-rouge&quot;&gt;dockerd-current&lt;/code&gt;的日志记录为源日志数据
输出部分说明，我所使用的环境中用到的插件有：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;rewrite_tag_filter&lt;/li&gt;
  &lt;li&gt;kubernetes_metadata&lt;/li&gt;
  &lt;li&gt;record_transformer&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;source&amp;gt;
@type systemd
path /var/log/journal
filters [{ &quot;_COMM&quot;: &quot;dockerd-current&quot; }]
#pos_file /tmp/fluentd/journal.pos
tag journal
strip_underscores true
read_from_head true
&amp;lt;/source&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;匹配journal的日志数据，将container_name以k8s_开头的日志打上tag标签
注意：官方的image中没有安装rewrite_tag_filter插件，在dockerfile指定的Gemfile添加
&lt;code class=&quot;highlighter-rouge&quot;&gt;gem 'fluent-plugin-rewrite-tag-filter','~&amp;gt;2.1.0'&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;&amp;lt;match journal&amp;gt;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;type rewrite_tag_filter&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;lt;rule&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;key CONTAINER_NAME&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;pattern ^k8s_&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;tag kubernetes.journal.container&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;log_level trace&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;lt;/match&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;根据上文打好的标签，过滤标签，将kubernetes.xx的标签匹配后，
通过kubernetes_metadata将日志数据格式化&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;&amp;lt;filter kubernetes.**&amp;gt;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;type kubernetes_metadata&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;use_journal true&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;lt;/filter&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;同上，匹配标签，使用record_transformer插件，添加topic&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;lt;filter kubernetes.**&amp;gt;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;type record_transformer&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;enable_ruby&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;lt;record&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;topic k8s-${record[&quot;kubernetes&quot;][&quot;container_name&quot;]}&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;lt;/record&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;lt;/filter&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;最后匹配所有，将日志按index_name保存到els中&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;lt;match **&amp;gt;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;id elasticsearch&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;type elasticsearch&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;log_level info&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#只有tag_key是topic的日志才会输入到els中&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;include_tag_key true&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;tag_key topic&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;host elasticsearch-logging&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;port 9200&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#logstash_format true&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#将日志的topic匹配索引的key[这里key的值定义为topic]，&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#如果日志的topic=索引的key,则将对应的日志打入对应的索引中&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;target_index_key topic&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;index_name logstash-${topic}&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;lt;buffer&amp;gt;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;type file&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;path /var/log/fluentd-buffers/kubernetes.system.buffer&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;flush_mode interval&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;retry_type exponential_backoff&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;flush_thread_count 2&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;flush_interval 5s&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;retry_forever&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;retry_max_interval 30&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;chunk_limit_size 2M&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;queue_limit_length 8&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;overflow_action block&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;lt;/buffer&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;lt;/match&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;插件作用：
&lt;code class=&quot;highlighter-rouge&quot;&gt;rewrite_tag_filter&lt;/code&gt;插件是从source源匹配的日志中，过滤找到&lt;code class=&quot;highlighter-rouge&quot;&gt;CONTAINER_NAME&lt;/code&gt;以k8s开头的日志，将过滤出来的日志打上tag
另外两个插件分别是将源文件进行格式处理
metadata将日志中添加对应kubenetes的信息，类似容器名，namespace名等，record则是添加一个topic字段，topic名为k8s-容器的pod名&lt;/p&gt;

&lt;p&gt;最后在match中将日志按index=topic的规则写到对应的index中（index的值即为容器名:k8s-appname-xxx)
在kibana中即能够定义&lt;code class=&quot;highlighter-rouge&quot;&gt;Index Patterns&lt;/code&gt;的值为k8s-appname*&lt;/p&gt;

&lt;h3 id=&quot;检验&quot;&gt;检验&lt;/h3&gt;

&lt;p&gt;查看所有pod启动情况：
&lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl get pods -n kube-system -o wide|grep -E 'elasticsearch|fluentd|kibana'&lt;/code&gt;     &lt;br /&gt;
查看service情况：   &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl get service  -n kube-system|grep -E 'elasticsearch|kibana'&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;注意&quot;&gt;注意&lt;/h3&gt;

&lt;p&gt;如果els经常报错，可以将els相关的组件从k8s中移除，单独运行elasticsearch。
然后在修改kibana和fluentd中指定的elasticsearch地址，指定elasticsearch的位置。&lt;/p&gt;

&lt;p&gt;kibana中加上：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- name: XPACK_SECURITY_ENABLED       
    value: &quot;false&quot;       
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;elasticsearch的docker-compose文件&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;version: '2'      
services:      
  elasticsearch:      
    image: docker.elastic.co/elasticsearch/elasticsearch:5.6.2      
    expose:      
      - 9200      
    ports:     
      - &quot;9200:9200&quot;      
    environment:      
      - bootstrap.memory_lock=true      
      - xpack.security.enabled=false      
      - &quot;ES_JAVA_OPTS=-Xms8G -Xmx8G&quot;      
    ulimits:      
      memlock:      
        soft: -1      
        hard: -1      
    volumes:      
      - /Elasticsearch/data:/usr/share/elasticsearch/data      
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Wed, 24 Oct 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/10/fek/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/10/fek/</guid>
        
        <category>k8s</category>
        
        
      </item>
    
      <item>
        <title>百度网盘Svip破解</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;github开源破解百度限速工具[mac版]
[github地址] (https://github.com/CodeTips/BaiduNetdiskPlugin-macOS)&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;需要本地安装git&lt;/li&gt;
    &lt;li&gt;mac上安装百度网盘&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd ~/Downloads &amp;amp;&amp;amp; git clone https://github.com/CodeTips/BaiduNetdiskPlugin-macOS.git &amp;amp;&amp;amp; ./BaiduNetdiskPlugin-macOS/Other/Install.sh&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;一键安装即可完成
测试了一下，没有提速，但是解除了限速~&lt;/p&gt;
</description>
        <pubDate>Thu, 18 Oct 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/10/baidudisk/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/10/baidudisk/</guid>
        
        <category>tools</category>
        
        
      </item>
    
      <item>
        <title>Nginx+https</title>
        <description>&lt;h3 id=&quot;生成免费证书&quot;&gt;生成免费证书&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;GIthub地址：[acme]: https://github.com/Neilpang/acme.sh /(免费证书github地址)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;生成方法：  &lt;br /&gt;
    &lt;code class=&quot;highlighter-rouge&quot;&gt;curl https://get.acme.sh | SH&lt;/code&gt; &lt;br /&gt;
    执行完后，脚本位置在~/.acme.sh/下  &lt;br /&gt;
    &lt;code class=&quot;highlighter-rouge&quot;&gt;acme.sh --issue --nginx -d example.com -d www.example.com -d cp.example.com&lt;/code&gt;  &lt;br /&gt;
    [上面命令是github给出的，我在服务器上执行的是下面的命令行] 
    ` sh  ~/.acme.sh/acme.sh    –issue –nginx  -d myucloud.com -d www.myucloud.com –force` &lt;br /&gt;
    执行完之后，屏幕上会显示生成证书的位置&lt;/p&gt;

&lt;h3 id=&quot;配置nginx&quot;&gt;配置nginx&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;默认是https访问，当访问80端口时，指向https&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server {
    listen  443 ssl;
    ssl_certificate      ./ssl/youdomain.cer;
    ssl_certificate_key  ./ssl/youdomain.key;
    ssl_session_timeout  5m;
    ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers         HIGH:!aNULL:!MD5;
    server_name  www.youdomainyoudomain;
    location / {
        root   /opt/html;
        index  index.html index.htm index.php;
    }
}

server {
    listen 80;
    server_name  www.youdomainyoudomain;
    rewrite ^(.*)$ https://${server_name}$1 permanent;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 09 Oct 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/10/https/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/10/https/</guid>
        
        <category>tools</category>
        
        
      </item>
    
      <item>
        <title>学习搭建个人博客</title>
        <description>&lt;h2 id=&quot;环境准备&quot;&gt;环境准备&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;说明：我使用的是jekyll+gitpage，然后在jekyll的模板中心挑选了[潘柏信]的模板 &lt;br /&gt;
搭建过程:  &lt;a href=&quot;https://yq.aliyun.com/articles/640926&quot;&gt;参考博客&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;首先是github账号&lt;/li&gt;
  &lt;li&gt;准备一个域名&lt;/li&gt;
  &lt;li&gt;挑选一个喜欢的模板:  &lt;a href=&quot;http://jekyllthemes.org/?spm=a2c4e.11153940.blogcont640926.12.77189941Qjir4F&quot;&gt;主题挑选&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;添加评论，统计插件&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;步骤&quot;&gt;步骤&lt;/h2&gt;

&lt;p&gt;步骤在参考博客，有非常详细的介绍&lt;/p&gt;

&lt;h2 id=&quot;说下在部署时遇到的几个小问题&quot;&gt;说下在部署时遇到的几个小问题：&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;提示ruby版本不对:   &lt;a href=&quot;https://www.jianshu.com/p/48ad6365f3eb&quot;&gt;解决&lt;/a&gt;    &lt;br /&gt;
  另外我是在mac上安装ruby，发现再次打开终端，又提示版本不对。  &lt;br /&gt;
  原因是mac自带的ruby有个默认版本，执行&lt;code class=&quot;highlighter-rouge&quot;&gt;rvm list&lt;/code&gt;查看已经安装的ruby版本，可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;rvm remove&lt;/code&gt;卸载掉老的版本，或者&lt;code class=&quot;highlighter-rouge&quot;&gt;rvm use xxx --default&lt;/code&gt;将要使用的版本设置为默认版本&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在github上复制项目以后，会有提示报错，我按下图设置的  &lt;br /&gt;
  &lt;img src=&quot;https://user-images.githubusercontent.com/26788046/46715858-50f10900-cc94-11e8-85c1-a7e82ccd7ec7.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;gittalk评论插件报错  &lt;br /&gt;
  报错信息忘记了，原因是我在_posts中创建的文章，在gittalk会用那个名字去创建issue,改成简短的英文就解决了，具体查看issue名称限制&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;统计不出数据
我的博客用的是模板带的统计，busuanzi,在作者的主页有说明：             &lt;br /&gt;
因七牛强制过期原有的『dn-lbstatics.qbox.me』域名（预计2018年10月初），与客服沟通数次无果，即使我提出为此付费也不行，只能更换域名到『busuanzi.ibruce.info』
所以遇到统计出不了，记得更换一下模板文件中服务的地址    &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script async src=&quot;//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;    &lt;br /&gt;
更换为：    &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script async src=&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;新建issue评论，跳转链接提示error
&lt;code class=&quot;highlighter-rouge&quot;&gt;https://www.yangshiwei.top/?error=redirect_uri_mismatch&amp;amp;error_description=The+redirect_uri+MUST+match+the+registered+callback+URL+for+this+application.&amp;amp;error_uri=https%3A%2F%2Fdeveloper.github.com%2Fapps%2Fmanaging-oauth-apps%2Ftroubleshooting-authorization-request-errors%2F%23redirect-uri-mismatch&lt;/code&gt;
 原因是，我给自定义域名加上了https,而在创建gittalk的应用中callback地址未调整。
 解决办法，登录github-&amp;gt;setting-&amp;gt; Developer settings -&amp;gt; Authorization callback URL 修改为当前博客的访问地址即&lt;code class=&quot;highlighter-rouge&quot;&gt;https://www.yangshiwei.top/&lt;/code&gt;
 建议在创建gittalk评论插件时填写的回调地址填github自带的域名&lt;code class=&quot;highlighter-rouge&quot;&gt;youname.github.io&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 06 Oct 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/10/blog/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/10/blog/</guid>
        
        <category>blog</category>
        
        
      </item>
    
  </channel>
</rss>
