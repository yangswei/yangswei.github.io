<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>杨世威</title>
    <description>欢迎来到我的个人站~</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 25 Oct 2018 17:33:01 +0800</pubDate>
    <lastBuildDate>Thu, 25 Oct 2018 17:33:01 +0800</lastBuildDate>
    <generator>Jekyll v3.5.2</generator>
    
      <item>
        <title>K8s集群-fek插件</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;安装插件前准备工作&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;github地址: &lt;a href=&quot;https://github.com/kubernetes/kubernetes&quot;&gt;https://github.com/kubernetes/kubernetes&lt;/a&gt;          &lt;br /&gt;
&lt;img src=&quot;/images/posts/k8s-fek/1.png&quot; alt=&quot;&quot; /&gt;    &lt;br /&gt;
如图,选择对应版本的k8s分支,然后下载对应的es,fluentd,kibana的yaml文件，一共6个文件。    &lt;br /&gt;
在github上提供了官方的image地址:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    k8s.gcr.io/elasticsearch:v5.6.4
    k8s.gcr.io/fluentd-elasticsearch:v2.0.4
    docker.elastic.co/kibana/kibana:5.6.4
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;这些镜像貌似都被墙了，可以翻墙将镜像下载到本地，然后调整yaml的iamge地址，或者找找一些大牛将这些镜像放到国内cdn提供下载的地址。    &lt;br /&gt;
另外在gihub里面提供了完整的dockerfile，可以自定义编辑镜像    &lt;br /&gt;
本人在使用时由于要使用额外的plugin，在fluentd的Gemfile中将要额外增加的插件添加进去，然后本地build镜像，另外两个镜像则是直接下载官方的再load到本地&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;执行yaml文件前，一些修改&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;其实fek的原理很简单：fluentd会根据配置文件&lt;code class=&quot;highlighter-rouge&quot;&gt;fluentd-es-configmap.yaml&lt;/code&gt;指定的规则收集系统日志，然后按规定格式打到els中，kibana读取els日志前端展示    &lt;br /&gt;
第一步：    &lt;br /&gt;
    设置node节点的标签,只在标记了标签的节点上运行fluentd        &lt;br /&gt;
    &lt;code class=&quot;highlighter-rouge&quot;&gt;
        kubectl get nodes
        kubectl label nodes nodenamexxx beta.kubernetes.io/fluentd-ds-ready=true
   &lt;/code&gt;    &lt;br /&gt;
第二步：    &lt;br /&gt;
    调整默认kibana的yaml文件,使用nodeport模式
    &lt;img src=&quot;/images/posts/k8s-fek/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;fluentd的configmap&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在kubenetes的github默认的配置文件中对于配置有非常详细的说明，这里我粗略的翻译一下，后面具体讲下当时我们使用的配置项
config中有三个标签：source,match,filter。source的标签指定数据源，filter的标签对数据匹配处理，match也是匹配，一般作为末尾指定输出&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在Linux系统上systemd系统来管理kubernetes服务，并且journal系统会接管服务程序的输出日志，可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;systemctl status xxx&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;journalctl -u xxx -f&lt;/code&gt;来查看kubernetes服务的日志.&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;k8s组件&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;日志内容&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;k8s-apiserver&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;无&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;kube-controller-manager&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;pod扩容或rc&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;kube-scheduler&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;pod扩容或rc&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;kubelet&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;pod周期相关：创建、停止&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;etcd&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;无&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;我们以kubelet日志为例，执行&lt;code class=&quot;highlighter-rouge&quot;&gt;journalctl -u kubelet -f&lt;/code&gt;可以看到传输到fluentd的源日志数据的格式是日期+节点+xx+container名+image名+port+xxx+xxx+&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;apply所有yaml文件&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;查看所有pod启动情况：&lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl get pods -n kube-system -o wide|grep -E 'elasticsearch|fluentd|kibana'&lt;/code&gt;     &lt;br /&gt;
查看service情况： &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl get service  -n kube-system|grep -E 'elasticsearch|kibana'&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;在kibana中创建索引&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;按默认的所有日志打到elasticsearch是按默认的带日期tag或者全部打到els的某个索引中。    &lt;br /&gt;
可以在fluentd中设置，将日志按服务名分别打到els对应的索引中，最后在els中收集到的日志是按服务名索引来建立的    &lt;br /&gt;
在kibana中按appname* 作为&lt;code class=&quot;highlighter-rouge&quot;&gt;Create Index Pattern&lt;/code&gt;     &lt;br /&gt;
&lt;img src=&quot;/images/posts/k8s-fek/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;注意&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;fek主要的是：
    fluentd中如何定义日志源source
    将源日志通过match,filter最终按标准输入到elasticsearch中去    &lt;br /&gt;
从源获取的日志，打上tag，输入到els中，fluentd的configmap中input.conf指定source文件，并打上tag，output.conf中按tag值匹配对应的index_name存入elasticsearch中          &lt;br /&gt;
另外    &lt;br /&gt;
      默认的els设置的limits最好调整一下，默认的不够用。els崩会导致kibana中报错。   &lt;br /&gt;
      如果els经常报错，可以将els从k8s中移除，单独运行els然后在kibana和fluentd中将els的地址修改为启动的地址    &lt;br /&gt;
    kibana中加上：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    - name: XPACK_SECURITY_ENABLED       
        value: &quot;false&quot;       
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;els启动文件：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;version: '2'      
services:      
  elasticsearch:      
    image: docker.elastic.co/elasticsearch/elasticsearch:5.6.2      
    expose:      
      - 9200      
    ports:     
      - &quot;9200:9200&quot;      
    environment:      
      - bootstrap.memory_lock=true      
      - xpack.security.enabled=false      
      - &quot;ES_JAVA_OPTS=-Xms8G -Xmx8G&quot;      
    ulimits:      
      memlock:      
        soft: -1      
        hard: -1      
    volumes:      
      - /opt/Elasticsearch/data:/usr/share/elasticsearch/data      
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Wed, 24 Oct 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/10/fek/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/10/fek/</guid>
        
        <category>k8s</category>
        
        
      </item>
    
      <item>
        <title>百度网盘Svip破解</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;github开源破解百度限速工具[mac版]
[github地址] (https://github.com/CodeTips/BaiduNetdiskPlugin-macOS)&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;需要本地安装git&lt;/li&gt;
    &lt;li&gt;mac上安装百度网盘&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd ~/Downloads &amp;amp;&amp;amp; git clone https://github.com/CodeTips/BaiduNetdiskPlugin-macOS.git &amp;amp;&amp;amp; ./BaiduNetdiskPlugin-macOS/Other/Install.sh&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;一键安装即可完成
测试了一下，没有提速，但是解除了限速~&lt;/p&gt;
</description>
        <pubDate>Thu, 18 Oct 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/10/baidudisk/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/10/baidudisk/</guid>
        
        <category>tools</category>
        
        
      </item>
    
      <item>
        <title>Nginx+https</title>
        <description>&lt;h3 id=&quot;生成免费证书&quot;&gt;生成免费证书&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;GIthub地址：[acme]: https://github.com/Neilpang/acme.sh /(免费证书github地址)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;生成方法：  &lt;br /&gt;
    &lt;code class=&quot;highlighter-rouge&quot;&gt;curl https://get.acme.sh | SH&lt;/code&gt; &lt;br /&gt;
    执行完后，脚本位置在~/.acme.sh/下  &lt;br /&gt;
    &lt;code class=&quot;highlighter-rouge&quot;&gt;acme.sh --issue --nginx -d example.com -d www.example.com -d cp.example.com&lt;/code&gt;  &lt;br /&gt;
    [上面命令是github给出的，我在服务器上执行的是下面的命令行] 
    ` sh  ~/.acme.sh/acme.sh    –issue –nginx  -d myucloud.com -d www.myucloud.com –force` &lt;br /&gt;
    执行完之后，屏幕上会显示生成证书的位置&lt;/p&gt;

&lt;h3 id=&quot;配置nginx&quot;&gt;配置nginx&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;默认是https访问，当访问80端口时，指向https&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server {
    listen  443 ssl;
    ssl_certificate      ./ssl/youdomain.cer;
    ssl_certificate_key  ./ssl/youdomain.key;
    ssl_session_timeout  5m;
    ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers         HIGH:!aNULL:!MD5;
    server_name  www.youdomainyoudomain;
    location / {
        root   /opt/html;
        index  index.html index.htm index.php;
    }
}

server {
    listen 80;
    server_name  www.youdomainyoudomain;
    rewrite ^(.*)$ https://${server_name}$1 permanent;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 09 Oct 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/10/https/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/10/https/</guid>
        
        <category>https证书</category>
        
        
      </item>
    
      <item>
        <title>学习搭建个人博客</title>
        <description>&lt;h2 id=&quot;环境准备&quot;&gt;环境准备&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;说明：我使用的是jekyll+gitpage，然后在jekyll的模板中心挑选了[潘柏信]的模板 &lt;br /&gt;
搭建过程:  &lt;a href=&quot;https://yq.aliyun.com/articles/640926&quot;&gt;参考博客&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;首先是github账号&lt;/li&gt;
  &lt;li&gt;准备一个域名&lt;/li&gt;
  &lt;li&gt;挑选一个喜欢的模板:  &lt;a href=&quot;http://jekyllthemes.org/?spm=a2c4e.11153940.blogcont640926.12.77189941Qjir4F&quot;&gt;主题挑选&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;添加评论，统计插件&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;步骤&quot;&gt;步骤&lt;/h2&gt;

&lt;p&gt;步骤在参考博客，有非常详细的介绍&lt;/p&gt;

&lt;p&gt;说下在部署时遇到的几个小问题：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;提示ruby版本不对:   &lt;a href=&quot;https://www.jianshu.com/p/48ad6365f3eb&quot;&gt;解决&lt;/a&gt;    &lt;br /&gt;
  另外我是在mac上安装ruby，发现再次打开终端，又提示版本不对。  &lt;br /&gt;
  原因是mac自带的ruby有个默认版本，执行&lt;code class=&quot;highlighter-rouge&quot;&gt;rvm list&lt;/code&gt;查看已经安装的ruby版本，可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;rvm remove&lt;/code&gt;卸载掉老的版本，或者&lt;code class=&quot;highlighter-rouge&quot;&gt;rvm use xxx --default&lt;/code&gt;将要使用的版本设置为默认版本&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在github上复制项目以后，会有提示报错，我按下图设置的  &lt;br /&gt;
  &lt;img src=&quot;https://user-images.githubusercontent.com/26788046/46715858-50f10900-cc94-11e8-85c1-a7e82ccd7ec7.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;gittalk评论插件报错  &lt;br /&gt;
  报错信息忘记了，原因是我在_posts中创建的文章，在gittalk会用那个名字去创建issue,改成简短的英文就解决了，具体查看issue名称限制&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;统计不出数据
我的博客用的是模板带的统计，busuanzi,在作者的主页有说明：             &lt;br /&gt;
因七牛强制过期原有的『dn-lbstatics.qbox.me』域名（预计2018年10月初），与客服沟通数次无果，即使我提出为此付费也不行，只能更换域名到『busuanzi.ibruce.info』
所以遇到统计出不了，记得更换一下模板文件中服务的地址    &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script async src=&quot;//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;    &lt;br /&gt;
更换为：    &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script async src=&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;新建issue评论，跳转链接提示error
&lt;code class=&quot;highlighter-rouge&quot;&gt;https://www.yangshiwei.top/?error=redirect_uri_mismatch&amp;amp;error_description=The+redirect_uri+MUST+match+the+registered+callback+URL+for+this+application.&amp;amp;error_uri=https%3A%2F%2Fdeveloper.github.com%2Fapps%2Fmanaging-oauth-apps%2Ftroubleshooting-authorization-request-errors%2F%23redirect-uri-mismatch&lt;/code&gt;
 原因是，我给自定义域名加上了https,而在创建gittalk的应用中callback地址未调整。
 解决办法，登录github-&amp;gt;setting-&amp;gt; Developer settings -&amp;gt; Authorization callback URL 修改为当前博客的访问地址即&lt;code class=&quot;highlighter-rouge&quot;&gt;https://www.yangshiwei.top/&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 06 Oct 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/10/blog/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/10/blog/</guid>
        
        <category>博客搭建</category>
        
        
      </item>
    
  </channel>
</rss>
