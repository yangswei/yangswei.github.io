<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>杨世威</title>
    <description>欢迎来到我的个人站~</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 22 Dec 2020 10:38:42 +0800</pubDate>
    <lastBuildDate>Tue, 22 Dec 2020 10:38:42 +0800</lastBuildDate>
    <generator>Jekyll v3.8.6</generator>
    
      <item>
        <title>檬檬美照合集</title>
        <description>&lt;h3 id=&quot;出壳啦&quot;&gt;出壳啦&lt;/h3&gt;
&lt;p&gt;我叫杨语宸，小名叫檬檬。7月的尾巴我出生啦~&lt;/p&gt;
</description>
        <pubDate>Thu, 12 Nov 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020/11/diary1/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/11/diary1/</guid>
        
        <category>diary, 檬檬</category>
        
        
      </item>
    
      <item>
        <title>20年,一些感想</title>
        <description>&lt;h3 id=&quot;最近&quot;&gt;最近&lt;/h3&gt;
&lt;p&gt;从今年疫情前开始说起吧,毕竟间隔了很久没有写博客
（实际上感觉90后这代人就挺特别的,经历了很多罕见的事~）&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.22号回家前夕&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;万万没想到疫情会这么严重的,当时整个周围的人对武汉疫情都不那么感冒,武汉当时都还没有封城&lt;br /&gt;
至今,疫情的威力,再看1.22的那个朋友圈,我的直觉还是蛮准的&lt;br /&gt;
说回来,疫情波及面还是始料未及的&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.24除夕&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;也是最特别的一年春节了,按照和媳妇的约定,今年是在我家过年,于是我们在家足足待了快两个月&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.10日回沪前夕&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在阿里最多的感受是变化,以前小公司的运维就是管好一亩三分地,系统维护搞搞好,顺带把各种挨边的事都做做&lt;br /&gt;
阿里是没有运维的,所以从公有云的运维能力移交,公司Gaap需求不高的恶劣情况下,实际上挺佩服李洋的,因为搞不好,我们这个部门是要被清退的&lt;br /&gt;
3月份公布了职级,直接按Teambition职级对标,定位P5,直接崩溃~&lt;br /&gt;
当时已经下定决心要走了,当时看了下市面上跳槽的话基本涨薪在50%+还是蛮有诱惑的,加上之前已经有头条的hr挖过,信心还是蛮充分的 &lt;br /&gt;
想法也很简单: 疫情期间好好干,等回上海就跳&lt;br /&gt;
后面和李洋聊了很多,感受也蛮多的&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;不是一个成熟的职场人&lt;/li&gt;
  &lt;li&gt;情绪控制不好&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;一直以来看不惯的人都会直接说,基本没什么保留,实际感觉这样的性格不好,容易得罪人,而我也不喜欢记仇,可能导致得罪过谁我不记得,别人记恨我几十年（哈哈,假想~~  &lt;br /&gt;
不够成熟的职场人,这个当时发的一条朋友圈求内推,实际上除了发泄一点作用没有&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;过完工作以来最长的一个春节后&lt;br /&gt;
疫情相对稳定了一些,回到上海,情绪也算稳定了（媳妇疫情被吓的也傻了,加上怀孕期间情绪崩溃,初一姑姑按惯例过来拜年,直接吓哭媳妇~ 回上海前一天去超超市买一次性雨衣,被我拒绝了 - -！）&lt;br /&gt;
实际上我的5年规划中,从teambition离职后是准备跳大厂的,被阿里收购,也算间接完成了这个目标&lt;br /&gt;
经过时间的消磨和与既定目标吻合等因素,导致到现在还在Teambition&lt;/p&gt;

&lt;p&gt;其实职场中跳槽的涨薪是远远大于在一家公司的,刚到上海时这点我很有感触,一定要动起来.身边跳槽涨薪的例子很多,从概率来说如果工资不高,跳槽是最好的选择了（这也是仙鹤接下来一年给自己定的目标,跳槽至少3家公司）&lt;br /&gt;
这样说的我在teambition待了3年多了,实际到teambition之前每家的周期是1-2年时间,一直保持大概的节奏,越来越感觉一个观点,&lt;strong&gt;“人”&lt;/strong&gt;对你跳槽的影响很有可能大于物质,就像前两天跟同事闲聊时说起的,部门如果没有李洋,估计很早就走了&lt;/p&gt;

&lt;p&gt;今年很多老同事相继的离职了,问了下去向跟待遇,涨幅都很不错,同时由于职能的变化,已经有很多新面孔不认识了,这也算是变化中的一条了吧~&lt;/p&gt;

&lt;p&gt;心态变化也蛮多的,以前看不惯直接就怼过去了,现在发现还能忍一忍,算是进步吧&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;7月份算是人生的另一条分界线吧,因为晋升当爸爸了~&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7.23&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;妈妈到上海照顾了一个月,到了预产期,仙鹤还没有发动的迹象,检查指标全部正常,我们准备好待产包怀着忐忑的心情住进医院等待.&lt;br /&gt;
因为中间隔着周末,周末一直在医院观察~  仙鹤禁吃的各种,这两天都吃了一遍：冰淇淋,汉堡包,烤鸭&lt;br /&gt;
已经休陪产假在医院住了几天了&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7.26&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;要催产了,已经孕周41周6天了,晚上塞了球.仙鹤腿部有血流出来了,当晚据她说,很难受.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7.27&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;第二天一早我们就准备好,带好进产房的东西,开始生产了.早上同行下去的准爸爸有8个,估计心情都和我差不多,蛮激动的&lt;br /&gt;
    开两指了,10点多就听里面传出消息.&lt;br /&gt;
    挂无痛了 &lt;br /&gt;
    …&lt;br /&gt;
    然后直到晚上10点多,一直没有发动的消息,早上一行的准爸已经只剩下我和另外一个了,最后他们剖腹产,只剩下我了.  &lt;br /&gt;
    当时已经预定好住院房间了,1000一晚.  &lt;br /&gt;
    媳妇让我先回去睡觉,实际当晚哪能睡得着呀&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7.28&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;很早就继续到产房外的凳子上坐着,实际都不知道是几点,当时天好像都没亮.&lt;br /&gt;
    在发动了..&lt;br /&gt;
    当听到里面叫到,仙鹤家属可以进来导乐了,实际心里放下了一口气  &lt;br /&gt;
    进到产房,看到仙鹤特别虚弱,人都傻了  &lt;br /&gt;
    然后看到很多血,当时一个踉跄,差点直接晕了过去,告诉自己要稳住 &lt;br /&gt;
    先是握住仙鹤的手,和她说一下话,开始发动不算顺利,期间多次的发力,将本就虚弱的身体直接崩到极限了,整个嘴唇都是白的,是脱水的那种白,而这种脱水是通过发力造成的~&lt;br /&gt;
    当时我脑子基本已经空白了只希望仙鹤坚持挺住就好,但是也只能握着仙鹤的手,实在晕的不行就到旁边坐下戳自己的太阳穴.&lt;br /&gt;
    12.17分,看到宝宝的头出来了,然后整个拉出来,本来紧着的弦瞬间松了一下,实际不知道当时宝宝已经缺氧并且由于挤压羊水破裂有点污染了  &lt;br /&gt;
    宝宝脖子上绕了两圈肚肌带,身上有点发紫,然后被护士放到旁边的台子上复苏.哇~哇的一声哭了出来,仙鹤的心瞬间放下了,她很累了.  &lt;br /&gt;
    我看宝宝减掉了肌带,带上提前准备好的帽子,拍了照片然后送到了NICU  &lt;br /&gt;
    仙鹤的麻醉结束之前要处理伤口,恢复&lt;br /&gt;
    从产房出来.身体的脱力以及伤口的创伤,实际仙鹤是特别虚弱的&lt;br /&gt;
    出血观察后,快接近傍晚,我们才回到产房,宝宝住到NICU我们悬着的心都放不下,又因为伤口当晚就需要冷敷,所以晚上基本都在担心着+处理伤口  &lt;br /&gt;
&lt;strong&gt;7.29&lt;/strong&gt;&lt;br /&gt;
先是报喜,但是不敢说宝宝在NICU,只是粗略说宝宝出生有点缺氧,要观察一下.&lt;br /&gt;
仙鹤拖着脱力的身体,为宝宝准备初乳,开始是很久收集10ml,然后很高兴的送到NICU的小窗子.  &lt;br /&gt;
想探头看一眼宝宝,根本看不到  &lt;br /&gt;
前面几天都特别的艰难,一是身体已经疲惫到一定的程度了,二来宝宝那边的情况还是未知数~&lt;br /&gt;
也不知道怎么样的坚持过来了,一直的担心也导致体重骤降接近10斤.  &lt;br /&gt;
…&lt;/p&gt;

&lt;p&gt;随着住院结束回家,宝宝炎症指标下降.终于一周后,接宝宝回家了. &lt;br /&gt;
当天心情特别的激动,阴霾散去的感觉&lt;br /&gt;
准备好衣服,尿不湿等等到医院,进到NICU.第一眼看到宝宝,很小很小的一只,差点老泪纵横~&lt;br /&gt;
附一张宝宝的日常照片&lt;br /&gt;
&lt;img src=&quot;/images/posts/2020-11-3-diary/yyc.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;宝爸篇&quot;&gt;宝爸篇&lt;/h3&gt;
&lt;p&gt;宝爸的准备工作实际蛮重要的,在待产时就为宝宝,宝妈单独做了一个项目准备&lt;br /&gt;
不得不说Teambition真的蛮好用的,日常旅行,各类攻略只要是生活中你觉得是个重要的事,都可以用&lt;br /&gt;
&lt;img src=&quot;/images/posts/2020-11-3-diary/tb1.png&quot; alt=&quot;&quot; /&gt;
虽然说teambition是个专门做项目管理的,做这个有点大材小用&lt;br /&gt;
&lt;img src=&quot;/images/posts/2020-11-3-diary/tb2.png&quot; alt=&quot;&quot; /&gt;
***&lt;br /&gt;
然后就是出生后起夜的事了,一定要请月嫂&lt;br /&gt;
刚开始真的不知道怎么弄宝宝,老一辈的带娃习惯实际很多都和现在有出入,加上对宝宝的无可下手&lt;br /&gt;
月嫂给宝宝洗澡,给宝妈护理,第一个月基本算是享福了,除了抱宝宝玩基本不用怎么照料宝宝&lt;br /&gt;
第二个月跟着月嫂学的,给宝宝洗澡换衣服等等,都有大概的概念了&lt;br /&gt;
上手起来很快&lt;br /&gt;
学习各种宝宝的护理,飞机抱啊,打嗝拍嗝呀,泪腺疏通啊等等&lt;/p&gt;

&lt;p&gt;剩下就是各种买买买啦&lt;br /&gt;
婴儿床,提篮（建议别买）,背带（babycare）都是咸鱼买的&lt;br /&gt;
另外宝宝水咯,奶粉咯,各种好看的衣服&lt;br /&gt;
现在沉迷给宝宝买衣服  购物车已经N宝宝衣服了&lt;br /&gt;
希望宝宝快点长大,可以一起交流玩耍~&lt;/p&gt;

</description>
        <pubDate>Tue, 03 Nov 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020/11/diary/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/11/diary/</guid>
        
        <category>diary</category>
        
        
      </item>
    
      <item>
        <title>Loki日志系统搭建</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;背景: EFK太重，Loki作为专注日志流的一款插件，对于只需要进行日志流处理的需求完全吻合&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;总览&quot;&gt;总览&lt;/h2&gt;
&lt;p&gt;Grafana Loki 包含三个组件&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Promtail&lt;/li&gt;
  &lt;li&gt;Loki&lt;/li&gt;
  &lt;li&gt;Grafana
由于原系统中已经部署Grafana用于监控，所以日志这套可共用Grafana,更加方便
其中Promtail类似于EFK中的fluentd组件，发现服务日志并输出到Loki，在Promtail中定义的label会添加到日志流中，替代索引。
而整个组件的难点就在于如何定义吻合自己系统的Promtail收集规则，以下是我学习的一些总结归纳，参考自&lt;a href=&quot;https://grafana.com/docs/loki/latest/getting-started/labels/&quot;&gt;官方文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;helm安装&quot;&gt;Helm安装&lt;/h3&gt;
&lt;p&gt;官方提供了Helm的安装方式&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-loki&quot;&gt;helm repo add loki https://grafana.github.io/loki/charts
helm repo update
helm upgrade --install loki loki/loki
helm upgrade --install promtail loki/promtail --set &quot;loki.serviceName=loki&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安装很简单,同时官方的Helm提供了很多的模板,通过配置环境变量开启功能.&lt;br /&gt;
同时可以将Helm下载后，进行自定义配置，然后再生效，例如配置数据持久化等&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;helm pull loki/loki
helm pull loki/promtail
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;通过yaml文件安装&quot;&gt;通过yaml文件安装&lt;/h3&gt;
&lt;p&gt;由于helm模式必须要获取repo源后安装，可能有些场景不太通用。&lt;br /&gt;
Loki包含:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;loki-secret.yaml&lt;/li&gt;
  &lt;li&gt;loki-service.yaml&lt;/li&gt;
  &lt;li&gt;loki-statefulset.yaml
promtail包含:&lt;/li&gt;
  &lt;li&gt;promtail-configmap.yaml&lt;/li&gt;
  &lt;li&gt;promtail-role.yaml&lt;/li&gt;
  &lt;li&gt;promtail-daemoset.yaml&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;注意该部分yaml中，磁盘是通过&lt;code class=&quot;highlighter-rouge&quot;&gt;emptyDir&lt;/code&gt;挂载，如需持久化，调整该部分即可&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;首先创建一个loki的namespace
namespace.yaml&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apiVersion: v1
kind: Namespace
metadata:
  name: loki
  labels:
    name: loki
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;loki-secret.yaml&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apiVersion: v1
data:
  loki.yaml: 1heF90cmFuc2Zlcl9yZXRyaWVzO9tZXRyaWNfbmFtZTogZmFsc2UKICByZWplY3Rfb2xkX3NhIGNodW5rX2Jsb2NrX3NpemU6IDI2MjE0NAogIGNodW5rX2lkbGVfcGVyaW9kOMzEwMApzdG9yYWdlX2NvbmZpZzoKICBib2x0ZGI6CiAgICBkaXJlY3Rvcnk6IC9kYmcmbXBsZXM6IHRa2kvaW5kZXgKICBmaWxlc3lzdGVtOgiAwCmxpbWl0c19jb25maWc6CiAgZW5mb3JjZVYS9sb2tpL2NodW5rcwp0YWJsZV9tYW5hZ2VyOgogIHJldGVudGiAzbQogIGNodW5rX3JldGFpbl9wZXJpb2Q6IDFtCiAgbGlmZWN5Y2xlcjoKICAgIHJpbmc6CiAgICAgIGt2c3RvcmU6CiAgICAgICAgc3RvcmU6IGlubWVtb3J5CiAgICAgIHJlcGxpY2F0aW9uX2ZhY3RvcjogMQogIGgMTY4aApzY2hlbWFfY29uZmlnOgogIGNvbmZpZ3M6CiAgLSBydWUKICByZWplY3Rfb2xkX3NhbXBsZXNfbWF4X2FnZToYXV0aF9lbmFibGVkOiBmYWxzZQpjaHVua19zdG9yZV9jb25maWc6CiAgbWF4X2xvb2tfYmFja19wZXJpb2Q6IDBzCmluZ2VzdGVyOgog9tOiAiMjAxIGJvbHRkYgpzZXJ2ZXI6CiAgaHR0cF9saXN0ZW5fcG9ydDoglvOC0wNC0xNSIKICAgIGluZGV4OgogICAgICBwZXJpb2Q6IDE2OGgKICAgICAgcHJlZml4OiBpbmRleF8KICAgIG9iamVjdF9zdG9yZTogZmlsZXN5c3RlbQogICAgc2NoZW1hOiB2OQogICAgc3RvcmU6bl9kZWxldGVzX2VuYWJsZWQ6IGZhbHNlCiAgcmV0ZW50aW9uX3BlcmlvZDogMHxxxx
kind: Secret
metadata:
  labels:
    app: loki
  name: loki
  namespace: loki
type: Opaque

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;loki-service.yaml&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apiVersion: v1
kind: Service
metadata:
  labels:
    app: loki
  name: loki
  namespace: loki
spec:
  ports:
  - name: loki
    port: 3100
    nodePort: 31000
  selector:
    app: loki
  type: NodePort

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;loki-statefulset.yaml&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: loki
  namespace: loki
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: loki
  serviceName: loki-headless
  template:
    metadata:
      labels:
        app: loki
    spec:
      containers:
      - args:
        - -config.file=/etc/loki/loki.yaml
        image: grafana/loki:1.6.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /ready
            port: 3100
            scheme: HTTP
          initialDelaySeconds: 45
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: loki
        ports:
        - containerPort: 3100
          name: loki
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /ready
            port: 3100
            scheme: HTTP
          initialDelaySeconds: 45
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        volumeMounts:
        - mountPath: /etc/loki
          name: config
        - mountPath: /data
          name: storage
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      volumes:
      - name: config
        secret:
          defaultMode: 420
          secretName: loki
      - emptyDir: {}
        name: storage
  updateStrategy:
    type: RollingUpdate

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;p&gt;promtail-configmap.yaml&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apiVersion: v1
data:
  promtail.yaml: |
    client:
      backoff_config:
        max_period: 5m
        max_retries: 10
        min_period: 500ms
      batchsize: 1048576
      batchwait: 1s
      external_labels: {}
      timeout: 10s
    positions:
      filename: /run/promtail/positions.yaml
    server:
      http_listen_port: 3101
    target_config:
      sync_period: 10s
    scrape_configs:
    - job_name: kubernetes-pods-name
      pipeline_stages:
        - docker: {}
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_label_name
        target_label: __service__
      - source_labels:
        - __meta_kubernetes_pod_node_name
        target_label: __host__
      - action: drop
        regex: ''
        source_labels:
        - __service__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - action: replace
        replacement: $1
        separator: /
        source_labels:
        - __meta_kubernetes_namespace
        - __service__
        target_label: job
      - action: replace
        source_labels:
        - __meta_kubernetes_namespace
        target_label: namespace
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_name
        target_label: pod
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_container_name
        target_label: container
      - replacement: /var/log/pods/*$1/*.log
        separator: /
        source_labels:
        - __meta_kubernetes_pod_uid
        - __meta_kubernetes_pod_container_name
        target_label: __path__
    - job_name: kubernetes-pods-app
      pipeline_stages:
        - docker: {}
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - action: drop
        regex: .+
        source_labels:
        - __meta_kubernetes_pod_label_name
      - source_labels:
        - __meta_kubernetes_pod_label_app
        target_label: __service__
      - source_labels:
        - __meta_kubernetes_pod_node_name
        target_label: __host__
      - action: drop
        regex: ''
        source_labels:
        - __service__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - action: replace
        replacement: $1
        separator: /
        source_labels:
        - __meta_kubernetes_namespace
        - __service__
        target_label: job
      - action: replace
        source_labels:
        - __meta_kubernetes_namespace
        target_label: namespace
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_name
        target_label: pod
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_container_name
        target_label: container
      - replacement: /var/log/pods/*$1/*.log
        separator: /
        source_labels:
        - __meta_kubernetes_pod_uid
        - __meta_kubernetes_pod_container_name
        target_label: __path__
    - job_name: kubernetes-pods-direct-controllers
      pipeline_stages:
        - docker: {}
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - action: drop
        regex: .+
        separator: ''
        source_labels:
        - __meta_kubernetes_pod_label_name
        - __meta_kubernetes_pod_label_app
      - action: drop
        regex: '[0-9a-z-.]+-[0-9a-f]{8,10}'
        source_labels:
        - __meta_kubernetes_pod_controller_name
      - source_labels:
        - __meta_kubernetes_pod_controller_name
        target_label: __service__
      - source_labels:
        - __meta_kubernetes_pod_node_name
        target_label: __host__
      - action: drop
        regex: ''
        source_labels:
        - __service__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - action: replace
        replacement: $1
        separator: /
        source_labels:
        - __meta_kubernetes_namespace
        - __service__
        target_label: job
      - action: replace
        source_labels:
        - __meta_kubernetes_namespace
        target_label: namespace
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_name
        target_label: pod
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_container_name
        target_label: container
      - replacement: /var/log/pods/*$1/*.log
        separator: /
        source_labels:
        - __meta_kubernetes_pod_uid
        - __meta_kubernetes_pod_container_name
        target_label: __path__
    - job_name: kubernetes-pods-indirect-controller
      pipeline_stages:
        - docker: {}
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - action: drop
        regex: .+
        separator: ''
        source_labels:
        - __meta_kubernetes_pod_label_name
        - __meta_kubernetes_pod_label_app
      - action: keep
        regex: '[0-9a-z-.]+-[0-9a-f]{8,10}'
        source_labels:
        - __meta_kubernetes_pod_controller_name
      - action: replace
        regex: '([0-9a-z-.]+)-[0-9a-f]{8,10}'
        source_labels:
        - __meta_kubernetes_pod_controller_name
        target_label: __service__
      - source_labels:
        - __meta_kubernetes_pod_node_name
        target_label: __host__
      - action: drop
        regex: ''
        source_labels:
        - __service__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - action: replace
        replacement: $1
        separator: /
        source_labels:
        - __meta_kubernetes_namespace
        - __service__
        target_label: job
      - action: replace
        source_labels:
        - __meta_kubernetes_namespace
        target_label: namespace
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_name
        target_label: pod
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_container_name
        target_label: container
      - replacement: /var/log/pods/*$1/*.log
        separator: /
        source_labels:
        - __meta_kubernetes_pod_uid
        - __meta_kubernetes_pod_container_name
        target_label: __path__
    - job_name: kubernetes-pods-static
      pipeline_stages:
        - docker: {}
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - action: drop
        regex: ''
        source_labels:
        - __meta_kubernetes_pod_annotation_kubernetes_io_config_mirror
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_label_component
        target_label: __service__
      - source_labels:
        - __meta_kubernetes_pod_node_name
        target_label: __host__
      - action: drop
        regex: ''
        source_labels:
        - __service__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - action: replace
        replacement: $1
        separator: /
        source_labels:
        - __meta_kubernetes_namespace
        - __service__
        target_label: job
      - action: replace
        source_labels:
        - __meta_kubernetes_namespace
        target_label: namespace
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_name
        target_label: pod
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_container_name
        target_label: container
      - replacement: /var/log/pods/*$1/*.log
        separator: /
        source_labels:
        - __meta_kubernetes_pod_annotation_kubernetes_io_config_mirror
        - __meta_kubernetes_pod_container_name
        target_label: __path__
kind: ConfigMap
metadata:
  labels:
    app: promtail
  name: promtail
  namespace: loki

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;promtail-daemoset.yaml&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: promtail
  namespace: loki
spec:
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: promtail
  template:
    metadata:
      labels:
        app: promtail
    spec:
      affinity: {}
      containers:
      - args:
        - -config.file=/etc/promtail/promtail.yaml
        - -client.url=http://loki:3100/loki/api/v1/push
        env:
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        image: grafana/promtail:1.6.0
        imagePullPolicy: IfNotPresent
        name: promtail
        ports:
        - containerPort: 3101
          name: http-metrics
          protocol: TCP
        volumeMounts:
        - mountPath: /etc/promtail
          name: config
        - mountPath: /run/promtail
          name: run
        - mountPath: /var/lib/docker/containers
          name: docker
          readOnly: true
        - mountPath: /var/log/pods
          name: pods
          readOnly: true
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      serviceAccount: promtail
      serviceAccountName: promtail
      tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
        operator: Exists
      volumes:
      - configMap:
          defaultMode: 420
          name: promtail
        name: config
      - hostPath:
          path: /run/promtail
          type: &quot;&quot;
        name: run
      - hostPath:
          path: /var/lib/docker/containers
          type: &quot;&quot;
        name: docker
      - hostPath:
          path: /var/log/pods
          type: &quot;&quot;
        name: pods
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;promtail-role.yaml&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apiVersion: v1
kind: ServiceAccount
metadata:
  name: promtail
  namespace: loki

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: promtail
rules:
- apiGroups: [&quot;&quot;]
  resources: [&quot;nodes&quot;, &quot;nodes/metrics&quot;, &quot;services&quot;, &quot;endpoints&quot;, &quot;pods&quot;]
  verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;]
- apiGroups: [&quot;&quot;]
  resources: [&quot;configmaps&quot;]
  verbs: [&quot;get&quot;]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: promtail
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: promtail
subjects:
- kind: ServiceAccount
  name: promtail
  namespace: loki

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 02 Sep 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020/09/loki-1/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/09/loki-1/</guid>
        
        <category>loki</category>
        
        
      </item>
    
      <item>
        <title>zabbix生产实践</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;背景:目前项目上k8s集群的监控采用标准的prometheus+altermanager+hook(hook是我这边收集处理告警的程序后续如果想写的话专门写一篇来介绍)但宿主机的各项指标监控prometheus覆盖不完全,针对windows、mac等各类平台的监控目前还是开源的zabbix比较完善&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;服务端部署&quot;&gt;服务端部署&lt;/h3&gt;

&lt;p&gt;本篇文章是基于github作者jangaraj的项目进行部署的,上一个版本的xxl持续使用了很久,效果不错,本次是基于新的项目docbix-xxl进行部署的&lt;br /&gt;
&lt;a href=&quot;https://github.com/monitoringartist/dockbix-xxl/blob/master/Dockerfile/dockbix-xxl-4.0/docker-compose.yml&quot;&gt;项目地址&lt;/a&gt;&lt;br /&gt;
server端的部署很简单,docker-compose文件如下:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-compose&quot;&gt;version: '3.1'
services:
  zabbixdb:
    image: monitoringartist/zabbix-db-mariadb:latest
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /xxx/mysqldata:/var/lib/mysql
      - /xxx/mysqlconf/myconf.cnf:/etc/my.cnf.d/myconf.cnf
    environment:
      - MARIADB_USER=zabbix
      - MARIADB_PASS=xxxxxx
  zabbixserver:
    image: monitoringartist/dockbix-xxl:latest
    depends_on:
      - zabbixdb
    ports:
      - &quot;1180:80&quot;
      - &quot;10051:10051&quot;
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /xx/internalter:/usr/local/share/zabbix/alertscripts
      - /xx/externalter:/usr/local/share/zabbix/externalscripts
      - /xx/zabbix_server.conf:/usr/local/etc/zabbix_server.conf
    environment:
      - ZS_DBHost=zabbixdb
      - ZS_DBUser=zabbix
      - ZS_DBPassword=xxxxxxxxx
      - XXL_zapix=true
      - XXL_grapher=true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;基于官方的文档做了一些调整&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;修改docbix,增加了python的requests库主要用于python脚本发送告警&lt;br /&gt;
[测试过程中貌似docbix的python已经装好了requests,这里为了后续方便添加,还是额外增加一下]&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;数据持久化&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;/xxx/mysqldata:/var/lib/mysql&lt;/code&gt;将mysql的数据落地到宿主机&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;增加自定义脚本&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;/xx/internalter:/usr/local/share/zabbix/alertscripts&lt;/code&gt;宿主机的告警脚本就能在前端-管理-告警媒介类型中直接添加后,让zabbix调用&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;增加配置文件解决报错&lt;br /&gt;
报错: &lt;code class=&quot;highlighter-rouge&quot;&gt;Aborted connection 111 to db: 'zabbix' user: 'zabbix' host: 'xx.5.5.5' (Got an error reading communication packets)&lt;/code&gt;&lt;br /&gt;
解决办法是先挂载mysql的配置文件和zabbix的配置文件,然后启动&lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose up -d&lt;/code&gt; &lt;br /&gt;
启动后,zabbix的配置被初始化覆盖掉了,重新将配置写入/xx/zabbix_server.conf文件中,然后&lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose restart zabbixdb&lt;/code&gt;即可&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/xx/zabbix_server.conf:/usr/local/etc/zabbix_server.conf&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/xxx/mysqlconf/myconf.cnf:/etc/my.cnf.d/myconf.cnf&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;其中dockerfile如下:&lt;/p&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; monitoringartist/dockbix-xxl:latest&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;yum &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; python-pip &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    pip &lt;span class=&quot;nb&quot;&gt;install  &lt;/span&gt;requests
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;mysql的conf如下:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mysqlconf&quot;&gt;open_files_limit = 4800
max_connections = 500
innodb_log_buffer_size = 32M
innodb_log_file_size = 2047M
innodb_buffer_pool_instances = 18
innodb_buffer_pool_size=18G
max_allowed_packet = 1024M
join_buffer_size = 1M
log_warnings = 2
log_error_verbosity = 3
slow_query_log
query_cache_size = 0
query_cache_type = 0
skip-name-resolve=1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;zabbix_server.conf:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-zabbixconf&quot;&gt;User=zabbix
SSLKeyLocation=xxx/ssl/keys
SSLCertLocation=/xxx/ssl/certs
SNMPTrapperFile=/xxps.tmp
PidFile=/xx.pid
LogType=console
LoadModulePath=/usr/lib/zabbix/modules
JavaGatewayPort=10052
JavaGateway=127.0.0.1
ExternalScripts=/xxs
DBUser=zabbix
DBPort=3306
DBPassword=xxx
DBName=zabbix
DBHost=zabbixdb
AlertScriptsPath=/usr/local/share/zabbix/alertscripts
---  以上部分是每次启动zabbix时自动生成、覆盖的 ---
LogFileSize=4
DebugLevel=5
StartPollers=102
StartPreprocessors=72
StartPollersUnreachable=14
StartTrappers=64
StartEscalators=2
StartAlerters=4
MaxHousekeeperDelete=8400
CacheSize=72M
StartDBSyncers=24
HistoryCacheSize=64M
HistoryIndexCacheSize=32M
TrendCacheSize=42M
ValueCacheSize=64M
Timeout=30
TrapperTimeout=300
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;客户端&quot;&gt;客户端&lt;/h3&gt;
&lt;p&gt;客户端如果使用默认只需要1.2.5步骤即可
客户端用ansible批量分发到机器的&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;通过rpm包安装client.zabbix-agent-3.2.0-1.el7.x86_64.rpm&lt;/li&gt;
  &lt;li&gt;将配置文件覆盖/etc/zabbix/zabbix_agentd.conf&lt;/li&gt;
  &lt;li&gt;加载自定义监控键值&lt;/li&gt;
  &lt;li&gt;创建目录,放入自定义键值依赖的脚本以及zabbix-client的启动脚本等(需要有执行权限)&lt;/li&gt;
  &lt;li&gt;启动zabbix-client&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;agent-conf,如果是像我批量推送,配置文件中ListenIP获取各机器的对应ip即可&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PidFile=xxx/xx/zabbix.pid
LogFile=xxx/xxx/agent.log
LogFileSize=0
Server=xxx
ServerActive=xxx
HostnameItem=system.hostname
Include=/etc/zabbix/zabbix_agentd.d/*.conf
ListenIP=xxx
StartAgents=5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;自定义监控键值userparameter.conf,放入到Include的路径中,这里放入/etc/zabbix/zabbix_agentd.d/下&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;UserParameter=tcp[*],/scripts/tcp_status_ss.sh $1&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;自定义脚本,4步骤生成/scripts目录后放入脚本&lt;br /&gt;
本脚本基于ss,监控各服务器连接状态监测脚本&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;SYNRECV &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
/usr/sbin/ss &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'synrecv'&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{print $2}'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;ESTAB &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
/usr/sbin/ss &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'estab'&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{print $2}'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;FINWAIT1 &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
/usr/sbin/ss &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; |  &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'FIN-WAIT-1'&lt;/span&gt;|wc &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;FINWAIT2 &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
/usr/sbin/ss &lt;span class=&quot;nt&quot;&gt;-ant&lt;/span&gt;| &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'FIN-WAIT-2'&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;wc&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;TIMEWAIT &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
/usr/sbin/ss &lt;span class=&quot;nt&quot;&gt;-ant&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'TIME-WAIT'&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;wc&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;LASTACK &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
/usr/sbin/ss &lt;span class=&quot;nt&quot;&gt;-ant&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'LAST-ACK'&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;wc&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;LISTEN &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
/usr/sbin/ss &lt;span class=&quot;nt&quot;&gt;-ant&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'LISTEN'&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;wc&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;zabbix启停脚本&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; /etc/rc.d/init.d/functions
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt; /usr/sbin/zabbix_agentd &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;zabbix_agentd
&lt;span class=&quot;k&quot;&gt;else
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;5
&lt;span class=&quot;k&quot;&gt;fi

&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;prog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;##*/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;conf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/xxx/zabbix_agentd.conf                                          &lt;span class=&quot;c&quot;&gt;#这里填写对应的zabbix配置文件全路径&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;pidfile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;^PidFile=.*$&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$conf&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;cut&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f2&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'\r'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;#这里从配置文件中取pid文件&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; /etc/sysconfig/zabbix-agent &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; /etc/sysconfig/zabbix-agent
&lt;span class=&quot;k&quot;&gt;fi

&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lockfile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/var/lock/subsys/zabbix-agent

start&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;$&quot;Starting Zabbix agent: &quot;&lt;/span&gt;
    daemon &lt;span class=&quot;nv&quot;&gt;$exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$conf&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;rv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$rv&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-eq&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;touch&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$lockfile&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$rv&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

stop&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;$&quot;Shutting down Zabbix agent: &quot;&lt;/span&gt;
    killproc &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$pidfile&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$timeout&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$prog&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;rv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$rv&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-eq&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$lockfile&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$rv&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

restart&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    stop
    start
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in
    &lt;/span&gt;start|stop|restart&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    force-reload&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        restart
        &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    status&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        status &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$pidfile&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$prog&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    try-restart|condrestart&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;status &lt;span class=&quot;nv&quot;&gt;$prog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;/dev/null &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
            &lt;/span&gt;restart
        &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    reload&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        action &lt;span class=&quot;s2&quot;&gt;$&quot;Service &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;##*/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; does not support the reload action: &quot;&lt;/span&gt; /bin/false
        &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;3
        &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;$&quot;Usage: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; {start|stop|status|restart|try-restart|force-reload}&quot;&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;2
        &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;前端&quot;&gt;前端&lt;/h3&gt;
&lt;p&gt;zabbix启动后暴露的端口是10050 &lt;br /&gt;
在nginx层将域名请求转发到10050,即可通过域名登录,默认账号Admin密码zabbix&lt;br /&gt;
前端主要做几件事情:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;自动发现-ip范围-检查（端口范围10050,键值system.uname）&lt;/li&gt;
  &lt;li&gt;配置-动作,右上角事件源选择自动注册-创建动作,将主机自动注册到对应的监控模板上&lt;/li&gt;
  &lt;li&gt;管理-报警媒介类型,这里添加告警脚本即对应服务端部署中&lt;code class=&quot;highlighter-rouge&quot;&gt;/xx/internalter:/usr/local/share/zabbix/alertscripts&lt;/code&gt;下的脚本名&lt;/li&gt;
  &lt;li&gt;自定义监控键值(可选择主机添加或模板添加),这里键值对应的是client端的userparameter.conf,创建监控项-键值tcp[xxx]这里xxx是传参到&lt;code class=&quot;highlighter-rouge&quot;&gt;/scripts/tcp_status_ss.sh&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;文章没有添加截图,欢迎大家交流,另外github那个问题周末找时间给作者提个issue看是否可以直接处理掉~&lt;/p&gt;
</description>
        <pubDate>Wed, 25 Dec 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/12/zabbix/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/12/zabbix/</guid>
        
        <category>zabbix</category>
        
        
      </item>
    
      <item>
        <title>如何将服务运行在k8s中</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;距离上次更新正好一个月,因为公司马上要搬家了,最近各种环境的迁移,进公司以后除了负责线上的运维还需要分出精力去搞公司的私有客户,最近终于从私有客户那边抽出来,多写写抓紧入门一下,这篇文章算是应用容器化+k8s上线的入门教程了&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;如何将服务运行在k8s中&quot;&gt;如何将服务运行在k8s中&lt;/h1&gt;

&lt;h2 id=&quot;环境准备&quot;&gt;环境准备&lt;/h2&gt;

&lt;p&gt;这篇文章建立在,已经准备好了如下的环境的基础上,如果没有可以找找教程,自行测试k8s太重的话可以弄轻量的k3s都可以&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;python3,docker&lt;/li&gt;
  &lt;li&gt;k8s,私有仓库&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;开发过程&quot;&gt;开发过程&lt;/h3&gt;

&lt;p&gt;因为刚写python,所以这里以python的代码为例,其他语言的均类似&lt;br /&gt;
下面是简单的Hello world进程,程序默认的监听端口是8080&lt;br /&gt;
（当然在我们生产上会有很多复杂的场景,这里只介绍基本情况,就是服务只监听一个端口的情形）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-app.py&quot;&gt;from flask import Flask
app = Flask(__name__)

@app.route(&quot;/&quot;)
def hello():
    return &quot;Hello world!&quot;

if __name__ == &quot;__main__&quot;:
    app.run()
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;容器化&quot;&gt;容器化&lt;/h3&gt;

&lt;p&gt;接下来就是怎么将各种语言写的代码容器化的操作了&lt;br /&gt;
以python为例,dockerfile很简单&lt;/p&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; python:3.6.4&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; /code &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;apt-get update &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;apt-get &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;freetds-dev &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;apt-get &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;unixodbc-dev
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; . /code &lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; requirements.txt /code&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;pip &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; /code/requirements.txt &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; https://pypi.douban.com/simple
&lt;span class=&quot;k&quot;&gt;WORKDIR&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; /code&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; [&quot;python3&quot;,&quot;/code/xx.py&quot;,&quot;8060&quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;FROM一个基础环境,如果你是node开发from一个node的镜像作为基础环境&lt;br /&gt;
RUN 是构建镜像过程中执行指令,这里是运行安装一些基础依赖,这个根据应用来&lt;br /&gt;
基础依赖安装完成后,将代码,以及python依赖的库安装一下&lt;br /&gt;
CMD 则是运行这个容器的最后一条命令&lt;/p&gt;

&lt;p&gt;实际生产环境会要求镜像包最小化&lt;br /&gt;
有一些基础的技巧,可以使最终生成的包大小减少很多。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;dockerfile每条命令相当于在基础镜像上包了一层,所以用连接符减少指令行数&lt;/li&gt;
  &lt;li&gt;multistage builds 这个很好用&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;下面以实际生产中multistage为例:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mutidockerfile&quot;&gt;  FROM xxx/node:6.11.2 AS builder
  WORKDIR /app
  COPY package.json ./package.json
  COPY yarn.lock ./
  RUN yarn install  &amp;amp;&amp;amp; yarn cache clean
  FROM node:6.11.2
  WORKDIR /xxx
  COPY --from=builder /xxx/node_modules /xxx/node_modules
  COPY . .
  EXPOSE 5000
  CMD npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;生产中尽量把构建过程拆分开,最终镜像只需要从过程镜像获取构建好的依赖&lt;/p&gt;

&lt;h3 id=&quot;私有仓库&quot;&gt;私有仓库&lt;/h3&gt;

&lt;p&gt;这里不过多介绍,镜像推送私有仓库很简单&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cmd&quot;&gt;docker build -t xxx:v0.0.1 .  
docker push xxxx:v0.0.1  
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;kubernetes创建应用&quot;&gt;kubernetes创建应用&lt;/h3&gt;

&lt;p&gt;下面我先附上deploy文件,再介绍下里面的内容&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-deployment&quot;&gt;apiVersion: v1
kind: Service
metadata:
  name: xxx(应用名)
  namespace: release(namespace名)
  labels:
    app: xxx(应用名)
    service: xxx(应用名)
spec:
  ports:
  - port: 8060
    name: http
  selector:
    app: xxx(应用名)
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: xxx(应用名)
  namespace: release(namespace名)
  labels:
    app: xxx(应用名)
    version: v1
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: xxx(应用名)
        version: v1
    spec:
      containers:
      - name: xxx(应用名)
        image: xxx:v0.0.1(这里是我们刚推送到私有仓库的地址)
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8060
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里我创建了两个资源,kind分别是service和deployment&lt;br /&gt;
service用于将port映射出去&lt;br /&gt;
deployment描述pod信息&lt;br /&gt;
因为我这里服务只需要内部调用,所以这里没有将端口暴露出去&lt;br /&gt;
实际生产环境中,除了需要暴露端口,类似证书,配置文件均可以通过configmap的形式挂载到pod中去&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-deploymentrelease&quot;&gt;apiVersion: v1
kind: Service
metadata:
  name: appnamexx
  namespace: namespacexx
  labels:
    app: appnamexx
spec:
  selector:
    app: appnamexx
  type: NodePort
  ports:
  - name: appnamexx
    port: portxx
    nodePort: nodeportxx
    protocol: TCP
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name:  appnamexx
  namespace: namespacexx
spec:
  minReadySeconds: 5
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  replicas: replicas
  template:
    metadata:
      labels:
        app:  appnamexx
    spec:
      securityContext:
        runAsUser: someuserxx
        fsGroup: somegroupxx
      containers:
      - name: appnamexx
        image: imageaddrxx
        resources:
          limits:
            cpu: 100m
            memory: 1000Mi
          requests:
            cpu: 100m
            memory: 500Mi
        livenessProbe:
          httpGet:
            path: /checkalive
            port: portxx
            scheme: HTTP
          initialDelaySeconds: 60
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /probe
            port: portxx
            scheme: HTTP
          initialDelaySeconds: 3
          timeoutSeconds: 5
        ports:
        - containerPort: portxx
          name: http
          protocol: TCP
        env:
          - name: SOME_ENVXX
            value: xxx
        volumeMounts:
          - name: configvolumexx
            mountPath: configpathxx
      volumes:
      - name: configvolumexx
        configMap:
          name: app's config

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到生产环境多了很多配置,除了nodeport将应用的端口映射出去&lt;br /&gt;
还增加了类似pod内存,cpu资源分配的限制&lt;br /&gt;
配置文件的挂载,注意volumes和volumeMounts对应的name要一致,并且这个名字和k8s的configmap的资源名都保持一致才能将congfigmap挂载到对应的pod中去&lt;/p&gt;

&lt;h3 id=&quot;上线调试&quot;&gt;上线&amp;amp;调试&lt;/h3&gt;

&lt;p&gt;上线就是apply对应的资源,最终调试可以参考上一篇讲nginx时讲到的本地调试方式进行本地调试,本地开发环境并不需要打包到镜像并发送到k8s的pod才能调试。只需在nginxcallback到本地的端口即可&lt;/p&gt;

&lt;h3 id=&quot;欢迎大佬交流探讨&quot;&gt;欢迎大佬交流探讨&lt;/h3&gt;

&lt;p&gt;页面中有邮箱和github联系方式,欢迎大佬们和我沟通交流,一起学习进步&lt;/p&gt;
</description>
        <pubDate>Thu, 14 Nov 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/11/appink8s/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/11/appink8s/</guid>
        
        <category>Linux</category>
        
        
      </item>
    
      <item>
        <title>Nginx生产实践</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;生产环境nginx,主要接收最前端的流量,然后负载均衡或者引流。记录下目前Nginx常用的一些配置与作用说明,通过这篇文章,可以了解到生产上各种nginx的使用方法与基础技巧&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;常用的一些nginx配置&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;测试环境本地项目调试&lt;/li&gt;
  &lt;li&gt;测试环境多端口调试&lt;/li&gt;
  &lt;li&gt;rewrite常用用法&lt;/li&gt;
  &lt;li&gt;root&amp;amp;alias用法与区别&lt;/li&gt;
  &lt;li&gt;生产环境切换&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;测试环境本地项目调试&quot;&gt;测试环境本地项目调试&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-nginx-1&quot;&gt;server {
    listen 80;
    server_name xxx;
    error_page 502 503 504 = @backurl;
    location / {
        proxy_pass http://$remote_addr:8888;
        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-NginX-Proxy true;
        proxy_set_header X-Real-IP $remote_addr;
    }
    location @backurl {
        proxy_pass http://127.0.0.1:8888;
        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-NginX-Proxy true;
        proxy_set_header X-Real-IP $remote_addr;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;请求工作方法： 访问对应server时,首先找location对应的url,url则指向remote_addr(客户端IP,注意这里的remote_addr需要在nginx设置获取真实ip配置),当客户端本地未监听8888时,则重新将location指向服务端的8888,即完成测试环境代理本地项目测试需求&lt;/p&gt;

&lt;h3 id=&quot;测试环境多端口调试&quot;&gt;测试环境多端口调试&lt;/h3&gt;
&lt;p&gt;同一服务在测试环境部署N个,那么如何在浏览器指定port请求对应服务？&lt;br /&gt;
通过cookie是一种方法,与测试项目本地调试的配置类似&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-port-nginx&quot;&gt;    location / {
        if ($cookie_port) {
          set $apiport $cookie_port;
        }
        proxy_pass http://$remote_addr:$apiport;
        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-NginX-Proxy true;
        proxy_set_header X-Real-IP $remote_addr;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其实只需要nginx获取到客户端请求时传输的port变量即可,这里将port信息放到cookie中,同样可以放到请求的head中,nginx通过http_x_port来进行反代即可&lt;/p&gt;

&lt;h3 id=&quot;rewrite常用用法&quot;&gt;rewrite常用用法&lt;/h3&gt;

&lt;p&gt;rewrite为了改写请求url,改变浏览器中的请求地址&lt;br /&gt;
有四个标签：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;last      匹配后继续匹配其他规则&lt;/li&gt;
  &lt;li&gt;break     匹配后不匹配其他规则&lt;/li&gt;
  &lt;li&gt;redirect  临时重定向&lt;/li&gt;
  &lt;li&gt;permanent 永久重定向&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;用法1：location中直接将url第一个根路径以前的url替换成rewrite指定的url,正则有很多,具体参考nginx-rewrite正则相关的文章&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-rewrite&quot;&gt;  rewrite ^/(.*) http://www.taobao.com/$1 permanent;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;用法2：例如请求的url是&lt;code class=&quot;highlighter-rouge&quot;&gt;taobao.com/xxx/aa&lt;/code&gt;则rewrite成&lt;code class=&quot;highlighter-rouge&quot;&gt;taobao.com/aa&lt;/code&gt;并执行pass的跳转并且不会继续匹配aa对应的location&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-rewrite2&quot;&gt;location /xxx {
    rewrite ^/xxx(.*) $1 break;
    proxy_pass http://xx.xx.xx.xx:port;
}
location /aa {
    dosomething
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;用法3：在if判断中,例如如下防盗链配置请求资源。除none blocked域名外其他均rewrite掉&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ifrewrite&quot;&gt;server {
  listen 8080;
  server_name xxx.abc.com
  location ~* ^.+\.(gif|jpg|png|swf|flv|rar|zip)$ {                                   ## location /xx/ {
                                                                                      ##    root /xxx/xx;
    valid_referers none blocked www.xxx.com www.yyy.com *.baidu.com  *.tabobao.com;
    if ($invalid_referer) {
      rewrite ^/ http://www.xxx.com/images/forbidden.png;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;rewrite使用方面有很多场景官方文档有详细说明：&lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_rewrite_module.html&quot;&gt;跳转&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;alias用法与区别&quot;&gt;alias用法与区别&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;root处理结果是将url指向location路径+root路径&lt;/li&gt;
  &lt;li&gt;alias的处理结果是：使用alias路径替换location路径&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;alias目录名后面一定要加”/”,alias在使用正则匹配时,必须捕捉要匹配的内容并在指定的内容处使用,alias只用于location中&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-location-alias&quot;&gt;location ^~ /t/ {
 alias /www/root/xxx/;
}
location = /favicon.ico {
    alias /xxx/favicon.ico;
    break;
}
location /xxx {
    alias /xxx/dist;
    index index.html;

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;生产环境切换&quot;&gt;生产环境切换&lt;/h3&gt;

&lt;p&gt;环境切换与端口切换类似,方法可以通过head或者cookie等进行传参,nginx中进行判断,根据不同的变量,进行不同的跳转&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;根据来源ip进行跳转&lt;/li&gt;
  &lt;li&gt;根据cookie是否包含version字段进行跳转&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-change&quot;&gt;        location /xxx/ {
            set $xxxpassurl http://xxx-release;
                if ($remote_addr ~ '(xx.xx.xx.x1|xx.xx.xx.x2)' ) {
                        set $xxxpassurl http://xxx-test;
                }
                if ($http_cookie ~ version\=release) {
                        set $xxxpassurl http://xxx-release;
                }
                if ($http_cookie ~ version\=ga) {
                        set $xxxpassurl http://xxx-test;
                }
            rewrite ^/xxx(.*)$  $1 break;
            proxy_pass $xxxpassurl;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $http_connection;
            proxy_http_version 1.1;
        }  
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Mon, 14 Oct 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/10/nginx/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/10/nginx/</guid>
        
        <category>Linux</category>
        
        
      </item>
    
      <item>
        <title>云主机磁盘分区</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;去年云主机快到期了,对比各个云主机,挑选性价比最高的一家云主机,最后选了ucloud的,因为确实便宜到爆炸啊&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;去年这个时候,薅羊毛2c8g的伦敦节点,花了300+一年搞定&lt;br /&gt;
今年看到官网又出了海外节点2折的活动,果断入手&lt;br /&gt;
香港节点2c4g20G+2M带宽,价格550&lt;/p&gt;

&lt;p&gt;以上与本文无关&lt;br /&gt;
发现系统盘有点小,准备扩一下系统盘,20g到40g一年0.01元,呵呵呵,不买我是弟弟啊~&lt;br /&gt;
一顿操作加载系统盘,重装电脑,发现fdisk下面仅仅/dev/vda显示为40g。系统盘已经挂载上去的/dev/vda1对应系统的/目录仍然是20g&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/2019-07-01-mkdisk/mkdisk1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;还有20g没有划入分区？那就分区呗&lt;/p&gt;

&lt;p&gt;fdisk /dev/vda
n p 2 新建分区-建立分区-分区编号（ucloud默认是2-4）
剩下的默认回车就行了,大概意思是选择盘符的起始位置,结束位置,就是划分磁盘的大小
w  最后w保存创建,退出交互模式&lt;/p&gt;

&lt;p&gt;分区建完,格式化磁盘&lt;br /&gt;
mkfs.ext4 /dev/vda2&lt;br /&gt;
如果报错,则在内核将刚创建的分区更新过去&lt;br /&gt;
partprobe&lt;br /&gt;
再格式化&lt;/p&gt;

&lt;p&gt;最后一步,挂载分区&lt;br /&gt;
mkdir /data (创建任意目录)&lt;br /&gt;
mount /dev/vda2 /data&lt;br /&gt;
&lt;img src=&quot;/images/posts/2019-07-01-mkdisk/mkdisk2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 01 Jul 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/07/mkdisk/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/07/mkdisk/</guid>
        
        <category>Linux</category>
        
        
      </item>
    
      <item>
        <title>Openshift-生产环境部署</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;生产环境安装openshift&lt;/p&gt;
&lt;/blockquote&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;主机类型&lt;/th&gt;
      &lt;th&gt;主机名&lt;/th&gt;
      &lt;th&gt;IP地址&lt;/th&gt;
      &lt;th&gt;操作系统&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Master节点&lt;/td&gt;
      &lt;td&gt;master.example.com&lt;/td&gt;
      &lt;td&gt;192.168.172.168&lt;/td&gt;
      &lt;td&gt;Centos 7.2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Node节点&lt;/td&gt;
      &lt;td&gt;node1.example.com&lt;/td&gt;
      &lt;td&gt;192.168.172.169&lt;/td&gt;
      &lt;td&gt;Centos 7.2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Node节点&lt;/td&gt;
      &lt;td&gt;node2.example.com&lt;/td&gt;
      &lt;td&gt;192.168.172.170&lt;/td&gt;
      &lt;td&gt;Centos 7.2&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;1配置主机名&quot;&gt;1.配置主机名&lt;/h2&gt;

&lt;p&gt;hostnamectl set-hostname master.example.com&lt;br /&gt;
配置相关域名解析,使主机名可解析到对应ip地址&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-host&quot;&gt;192.168.172.168  master.example.com  
192.168.172.169  node1.example.com  
192.168.172.170  node2.example.com  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;所有节点设置网络&lt;br /&gt;
查看网络链接&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;nmcli con show&lt;/code&gt;
打开链接&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;nmcli con up eth0&lt;/code&gt;&lt;br /&gt;
设置开机自启动&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;nmcli con mod eth0 connection.autoconnect yes&lt;/code&gt;&lt;br /&gt;
重启网络服务&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;systemctl restart NetworkManager&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;2安装及配置软件包&quot;&gt;2.安装及配置软件包&lt;/h2&gt;

&lt;p&gt;所有节点安装openshift依赖软件包&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;yum install -y wget git net-tools bind-utils iptables-services bridge-utils bash-completion&lt;/code&gt;&lt;br /&gt;
所有节点安装容器引擎docker&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;yum install -y docker&lt;/code&gt;&lt;br /&gt;
修改配置存储&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;vim /etc/sysconfig/docker-storage-setup&lt;/code&gt;&lt;br /&gt;
添加 ENVS=/dev/sdb
执行docker-storage-setup&lt;/p&gt;

&lt;p&gt;在Master节点启动EPEL安装ansible&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;https://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-8.noarch.rpm  
&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;s/^enabled=1/enabled=0/&quot;&lt;/span&gt; /etc/yum.repos.d/epel.repo  
yum &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--enablerepo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;epel &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;ansible pyopenSSL  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在Master节点生成SSH密钥&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;ssh-keygen -f /root/.ssh/id_rsa -N ''&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Ansible基于Agentless架构实现,不需要在目标主机安装agent依赖ssh远程控制协议,所以需要配置master和node节点互信&lt;br /&gt;
在Master节点执行：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;host &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;master.example.com &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
node1.example.com &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
node2.example.com&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;ssh-copy-id &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; ~/.ssh/id_rsa.pub &lt;span class=&quot;nv&quot;&gt;$host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在Master节点安装Openshift的ansible Playbook&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget https://github.com/openshift/openshift-ansible/archive/openshift-ansible-3.3.26-1.tar.gz  
&lt;span class=&quot;nb&quot;&gt;tar &lt;/span&gt;zxf openshift-ansible-3.3.26-1.tar.gz  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;安装单master可以不单独安装etcd,这里选择安装单节点的etcd,生产环境安装3节点的etcd集群,确保高可用&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; etcd  
systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;etcd  
systemctl start etcd  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;配置ansible&quot;&gt;配置ansible&lt;/h2&gt;

&lt;p&gt;备份原有ansible的host&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;cp /etc/ansible/hosts /etc/ansible/hosts-bk&lt;/code&gt;&lt;br /&gt;
修改hosts:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-hosts文件&quot;&gt;[OSEv3:children]
masters
nodes
etcd

[OSEv3:vars]
ansible_ssh_user=root
openshift_deployment_type=origin
openshift_release=1.3.0

openshift_master_identity_providers=[{'name': 'htpasswd_auth', 'login': 'true', 'challenge': 'true', 'kind': 'HTPasswdPasswordIdentityProvider', 'filename': '/etc/origin/master/htpasswd'}]

[masters]
openshift-test-master

[nodes]
master.example.com  
node1.example.com  
node2.example.com

[etcd]
openshift-test-master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;执行安装&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;ansible-playbook ~/openshift-ansible-3.3.26-1/playbooks/byo/config.yml&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;执行完成以后,通过oc get node 查看节点状态&lt;/p&gt;

&lt;p&gt;基础安装完毕以后,进行组件和功能的配置&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;对接用户身份信息库&lt;/li&gt;
  &lt;li&gt;导入Image Stream&lt;/li&gt;
  &lt;li&gt;导入Template&lt;/li&gt;
  &lt;li&gt;部署Router&lt;/li&gt;
  &lt;li&gt;部署Registry&lt;/li&gt;
  &lt;li&gt;部署度量收集组件&lt;/li&gt;
  &lt;li&gt;部署日志聚合组件&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;用户身份信息库：&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;openshift_master_identity_providers=[{'name': 'htpasswd_auth', 'login': 'true', 'challenge': 'true', 'kind': 'HTPasswdPasswordIdentityProvider', 'filename': '/etc/origin/master/htpasswd'}]&lt;/code&gt;&lt;br /&gt;
定义了文件/etc/origin/master/htpasswd作为用户身份信息库,我们通过&lt;code class=&quot;highlighter-rouge&quot;&gt;htpasswd -b /etc/origin/master/htpasswd dev dev&lt;/code&gt;来创建用户&lt;/p&gt;

&lt;p&gt;is和template用ansible部署时默认已经部署上了&lt;/p&gt;

&lt;p&gt;Router部署&lt;br /&gt;
Router是以容器的形式运行在Openshift平台,默认情况不知道容器运行在哪个node上&lt;br /&gt;
为node打上标签(Label),然后通过节点选择器(NodeSelector)指定容器运行的node&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;oc label node node1.example.com infra=yes&lt;/code&gt;&lt;br /&gt;
查看node节点&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;oc get node --show-labels&lt;/code&gt;&lt;br /&gt;
为Router使用的Service Account赋权&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;oadm policy add-scc-to-user privileged system:serviceaccount:default:router
oadm policy add-cluster-role-to-user cluster-reader system:serviceaccount:default:router
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;部署router&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;oadm router ose-router --replicas=1 --service-account=router --selector='infra=yes'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Registry部署&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;oadm registry --config='/etc/origin/master/admin.kubeconfig' --service-account=registry --selector='infra=yes' -n default&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;查看pod&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;oc get pod -n default|grep registry&lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 14 Feb 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/02/openshift2/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/02/openshift2/</guid>
        
        <category>Openshift</category>
        
        
      </item>
    
      <item>
        <title>Openshift-测试环境AllInOne</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;记录Openshift笔记,刚准备熟悉一下mysql,boss要求看openshift相关的东西,所以mysql系列的后续再更新,边写openshift边学习沉淀吧&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;安装openshift-all-in-one&quot;&gt;安装openshift-All in one&lt;/h2&gt;

&lt;p&gt;https://www.clouda.ca/blog/general/openshift-on-centos-7-quick-installation/&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;wget https://github.com/openshift/origin/releases/download/v1.3.0/openshift-origin-server-v1.3.0-3ab7af3d097b57f933eccef684a714f2368804e7-linux-64bit.tar.gz&quot;&gt;二进制下载地址&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;oc命令行创建应用&quot;&gt;oc命令行创建应用&lt;/h3&gt;

&lt;p&gt;因为oc命令带有权限管控,所以在使用oc命令前,需要通过oc login 登录&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;oc login -u test https://10.50.64.34:8443&lt;/code&gt;&lt;br /&gt;
创建项目(这个项目类似在k8s创建一个namespace)&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;oc new-project hello-world-oc&lt;/code&gt;&lt;br /&gt;
部署应用&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;oc new-app openshift/hello-openshift&lt;/code&gt;&lt;br /&gt;
查看pod&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;oc get pod&lt;/code&gt;&lt;br /&gt;
查看pod详细信息&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;oc describe pod hello-openshift-1-z8mki&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;集群管理员账号登录&quot;&gt;集群管理员账号登录&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir -p ~/.kube
cp /opt/openshift/openshift.local.config/master/admin.kubeconfig ~/.kube/config
登录  
oc login -u system:admin
查看集群节点  
oc get node
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;添加route&quot;&gt;添加route&lt;/h3&gt;

&lt;p&gt;类似kube-proxy,是外界访问openshift的入口,外部请求都会到达router&lt;br /&gt;
切换到default项目&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;oc project default&lt;/code&gt;
router组件需要读取集群的信息,它关联一个系统账号service account并为这个账号赋权。&lt;br /&gt;
(这个账号是专门供程序和组件使用的账号)&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;oadm policy add-scc-to-user privileged system:serviceaccount:default:router&lt;/code&gt;
创建router实例&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;oadm router router --replicas=1 --service-account=router
oc get pod -n default
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;添加registry&quot;&gt;添加registry&lt;/h3&gt;
&lt;p&gt;集群的docker registry内部docker镜像仓库&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;oc project default
oadm registry --config=/opt/openshift/openshift.local.config/master/admin.kubeconfig --service-account=registry
oc get pod  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;因为registry没有启用https,所以需要修改docker配置,让docker以非https模式连接到registry.&lt;br /&gt;
在OPTIONS变量值中添加参数’–insecure-registry=172.30.0.0/16’&lt;br /&gt;
重启docker systemctl restart docker&lt;/p&gt;

&lt;h3 id=&quot;添加image-stream&quot;&gt;添加Image Stream&lt;/h3&gt;

&lt;p&gt;is镜像集合,openshift并不一定要用到is,is是为了更加方便的将镜像管理和使用&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;oc project openshift
openshift version
curl https://raw.githubusercontent.com/openshift/origin/v1.3.0/examples/image-streams/image-streams-centos7.json|oc create -f - -n openshift
oc get is -n openshift
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;添加template&quot;&gt;添加Template&lt;/h3&gt;

&lt;p&gt;openshift定义了一些template供用户使用,模板定义一个多个部署镜像的集合,定义部署依赖对象以及配置参数项&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;oc project openshift
oc create -f https://raw.githubusercontent.com/openshift/origin/v1.3.0/examples/quickstarts/cakephp-mysql.json -n openshift  
oc get template -n openshift
oc get template cakephp-mysql-example -o json -n openshift
oc create -f https://raw.githubusercontent.com/nichochen/openshift-book-source/master/template/wildfly-basic-s2i.template.json -n openshift  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sun, 20 Jan 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/01/openshift1/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/01/openshift1/</guid>
        
        <category>Openshift</category>
        
        
      </item>
    
      <item>
        <title>Mysql最佳实践</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;记录mysql读书日记&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;安装mysql&quot;&gt;安装mysql&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ curl -LO http://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm&lt;/code&gt;
安装 mysql 源&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ sudo yum localinstall mysql57-community-release-el7-11.noarch.rpm&lt;/code&gt;
检查 yum 源是否安装成功&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-a&quot;&gt;
$ sudo yum repolist enabled | grep &quot;mysql.*-community.*&quot;
mysql-connectors-community           MySQL Connectors Community              21
mysql-tools-community                MySQL Tools Community                   38
mysql57-community                    MySQL 5.7 Community Server             130
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如上所示,找到了 mysql 的安装包&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;安装
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo yum install mysql-community-server
$ sudo systemctl enable mysqld
$ sudo systemctl start mysqld
$ sudo systemctl status mysqld
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;修改root默认密码&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;MySQL 5.7 启动后，在&lt;code class=&quot;highlighter-rouge&quot;&gt;/var/log/mysqld.log&lt;/code&gt;文件中给 root 生成了一个默认密码,通过下面的方式找到 root 默认密码,然后登录 mysql 进行修改:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-b&quot;&gt;$ grep 'temporary password' /var/log/mysqld.log
[Note] A temporary password is generated for root@localhost: **********
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;登录 MySQL 并修改密码&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Enter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;USER&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'@'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localhost&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDENTIFIED&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyNewPass4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;注意：&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;默认安装了密码安全检查插件（&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;validate_password&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;）&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;默认密码检查策略要求密码必须包含：大小写字母、数字和特殊符号&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;并且长度不能少于&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;位。&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;通过 MySQL 环境变量可以查看密码策略的相关信息:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-e&quot;&gt;
mysql&amp;gt; SHOW VARIABLES LIKE 'validate_password%';
+--------------------------------------+--------+
| Variable_name                        | Value  |
+--------------------------------------+--------+
| validate_password_check_user_name    | OFF    |
| validate_password_dictionary_file    |        |
| validate_password_length             | 8      |
| validate_password_mixed_case_count   | 1      |
| validate_password_number_count       | 1      |
| validate_password_policy             | MEDIUM |
| validate_password_special_char_count | 1      |
+--------------------------------------+--------+
7 rows in set (0.01 sec)
具体修改,参见 http://dev.mysql.com/doc/refman/5.7/en/validate-password-options-variables.html#sysvar_validate_password_policy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;指定密码校验策略&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-f&quot;&gt;$ sudo vi /etc/my.cnf

[mysqld]
# 添加如下键值对, 0=LOW, 1=MEDIUM, 2=STRONG
validate_password_policy=0
禁用密码策略

$ sudo vi /etc/my.cnf
	
[mysqld]
# 禁用密码校验策略
validate_password = off
重启 MySQL 服务,使配置生效

$ sudo systemctl restart mysqld
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;添加远程登录用户&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;«««&amp;lt; HEAD
MySQL 默认只允许 root 帐户在本地登录,如果要在其它机器上连接 MySQL,必须修改 root 允许远程连接,或者添加一个允许远程连接的帐户,为了安全起见,本例添加一个新的帐户：&lt;br /&gt;
=======
MySQL默认只允许 root 帐户在本地登录,如果要在其它机器上连接 MySQL,必须修改 root 允许远程连接,或者添加一个允许远程连接的帐户,为了安全起见,本例添加一个新的帐户:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;blockquote&gt;
        &lt;blockquote&gt;
          &lt;blockquote&gt;
            &lt;blockquote&gt;
              &lt;p&gt;15c48c1efc412a51d26c29d001b91268389da2e4&lt;/p&gt;
            &lt;/blockquote&gt;
          &lt;/blockquote&gt;
        &lt;/blockquote&gt;
      &lt;/blockquote&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mysql&amp;gt; GRANT ALL PRIVILEGES ON *.* TO 'admin'@'%' IDENTIFIED BY 'secret' WITH GRANT OPTION;&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;配置默认编码为 utf8&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;MySQL 默认为 latin1, 一般修改为 UTF-8&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ vi /etc/my.cnf
[mysqld]
# 在myslqd下添加如下键值对
character_set_server=utf8
init_connect='SET NAMES utf8'
&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD
重启 MySQL 服务,使配置生效
=======
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;重启 MySQL 服务，使配置生效&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ sudo systemctl restart mysqld&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;blockquote&gt;
        &lt;blockquote&gt;
          &lt;blockquote&gt;
            &lt;blockquote&gt;
              &lt;p&gt;15c48c1efc412a51d26c29d001b91268389da2e4&lt;/p&gt;
            &lt;/blockquote&gt;
          &lt;/blockquote&gt;
        &lt;/blockquote&gt;
      &lt;/blockquote&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;查看字符集&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysql&amp;gt; SHOW VARIABLES LIKE 'character%';
+--------------------------+----------------------------+
| Variable_name            | Value                      |
+--------------------------+----------------------------+
| character_set_client     | utf8                       |
| character_set_connection | utf8                       |
| character_set_database   | utf8                       |
| character_set_filesystem | binary                     |
| character_set_results    | utf8                       |
| character_set_server     | utf8                       |
| character_set_system     | utf8                       |
| character_sets_dir       | /usr/share/mysql/charsets/ |
+--------------------------+----------------------------+
8 rows in set (0.00 sec
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;开启端口&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo firewall-cmd --zone=public --add-port=3306/tcp --permanent
$ sudo firewall-cmd --reload
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;简易方式快速启动&quot;&gt;简易方式快速启动&lt;/h3&gt;

&lt;p&gt;宿主机上执行&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -LO http://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm
yum install mysql-community-client -y 
yum install  docker docker-compose -y
mkdir -p /mysql
mkdir -p /mysql/data
mkdir -p /mysql/config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;将my.conf复制到/mysql/config下&lt;br /&gt;
将docker-compose.yml拷贝到/mysql下&lt;br /&gt;
my.cnf配置如下（.cnf结尾）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-my.cnf&quot;&gt;# The MySQL database server configuration file.
#
# You can copy this to one of:
# - &quot;/etc/mysql/my.cnf&quot; to set global options,
# - &quot;~/.my.cnf&quot; to set user-specific options.
#
# One can use all long options that the program supports.
# Run program with --help to get a list of available options and with
# --print-defaults to see which it would actually understand and use.
#
# For explanations see
# http://dev.mysql.com/doc/mysql/en/server-system-variables.html

# This will be passed to all mysql clients
# It has been reported that passwords should be enclosed with ticks/quotes
# escpecially if they contain &quot;#&quot; chars...
# Remember to edit /etc/mysql/debian.cnf when changing the socket location.

# Here is entries for some specific programs
# The following values assume you have at least 32M ram

[mysqld_safe]
socket		= /var/run/mysqld/mysqld.sock
nice		= 0

[mysqld]
#
# * Basic Settings
#
user		= mysql
pid-file	= /var/run/mysqld/mysqld.pid
socket		= /var/run/mysqld/mysqld.sock
port		= 3306
basedir		= /usr
datadir		= /var/lib/mysql
tmpdir		= /tmp
lc-messages-dir	= /usr/share/mysql
skip-external-locking
skip-grant-tables
#
# Instead of skip-networking the default is now to listen only on
# localhost which is more compatible and is not less secure.
bind-address		= 0.0.0.0
#
# * Fine Tuning
#
key_buffer_size		= 16M
max_allowed_packet	= 16M
thread_stack		= 192K
thread_cache_size       = 8
# This replaces the startup script and checks MyISAM tables if needed
# the first time they are touched
myisam-recover-options  = BACKUP
#max_connections        = 100
#table_cache            = 64
#thread_concurrency     = 10
#
# * Query Cache Configuration
#
query_cache_limit	= 1M
query_cache_size        = 16M
#
# * Logging and Replication
#
# Both location gets rotated by the cronjob.
# Be aware that this log type is a performance killer.
# As of 5.1 you can enable the log at runtime!
#general_log_file        = /var/log/mysql/mysql.log
#general_log             = 1
#
# Error log - should be very few entries.
#
log_error = /var/log/mysql/error.log
#
# Here you can see queries with especially long duration
#log_slow_queries	= /var/log/mysql/mysql-slow.log
#long_query_time = 2
#log-queries-not-using-indexes
#
# The following can be used as easy to replay backup logs or for replication.
# note: if you are setting up a replication slave, see README.Debian about
#       other settings you may need to change.
#server-id		= 1
#log_bin			= /var/log/mysql/mysql-bin.log
expire_logs_days	= 10
max_binlog_size   = 100M
#binlog_do_db		= include_database_name
#binlog_ignore_db	= include_database_name
#
# * InnoDB
#
# InnoDB is enabled by default with a 10MB datafile in /var/lib/mysql/.
# Read the manual for more InnoDB related options. There are many!
#
# * Security Features
#
# Read the manual, too, if you want chroot!
# chroot = /var/lib/mysql/
#
# For generating SSL certificates I recommend the OpenSSL GUI &quot;tinyca&quot;.
#
# ssl-ca=/etc/mysql/cacert.pem
# ssl-cert=/etc/mysql/server-cert.pem
# ssl-key=/etc/mysql/server-key.pem
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;docker-compose文件&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-compose&quot;&gt;version: '3'
services:
  mysql:
    image: mysql:5.7
    container_name: mysql
    command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci #设置utf8字符集
    restart: always
    ports:
      - 6606:3306
    volumes:
      - &quot;/mysql/data:/var/lib/mysql&quot;
      - &quot;/mysql/config:/etc/mysql/conf.d&quot;
    environment:
      MYSQL_ROOT_PASSWORD: &quot;123456&quot;   #root管理员用户密码
      MYSQL_USER: test   #创建test用户
      MYSQL_PASSWORD: test  #设置test用户的密码
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;docker-compose up -d 启动&lt;br /&gt;
宿主机登录mysql: mysql -uroot -P6606 -p -h127.0.0.1&lt;/p&gt;

&lt;p&gt;«««&amp;lt; HEAD
报错&lt;code class=&quot;highlighter-rouge&quot;&gt;Access denied for user 'root'@'localhost' (using password: YES)&lt;/code&gt;
配置文件添加：skip-grant-tables
进入数据量,更新密码update mysql.user set authentication_string=password(‘&lt;strong&gt;**&lt;/strong&gt;&lt;em&gt;’) where user=’&lt;/em&gt;&lt;strong&gt;**&lt;/strong&gt;’
=======
报错&lt;code class=&quot;highlighter-rouge&quot;&gt;Access denied for user 'root'@'localhost' (using password: YES)&lt;/code&gt;&lt;br /&gt;
配置文件添加:skip-grant-tables&lt;br /&gt;
进入数据量,更新密码&lt;code class=&quot;highlighter-rouge&quot;&gt;update mysql.user set authentication_string=password('*******') where user='*******'&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;blockquote&gt;
        &lt;blockquote&gt;
          &lt;blockquote&gt;
            &lt;blockquote&gt;
              &lt;p&gt;15c48c1efc412a51d26c29d001b91268389da2e4&lt;/p&gt;
            &lt;/blockquote&gt;
          &lt;/blockquote&gt;
        &lt;/blockquote&gt;
      &lt;/blockquote&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Mon, 14 Jan 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/01/learnmysql/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/01/learnmysql/</guid>
        
        <category>Mysql</category>
        
        
      </item>
    
  </channel>
</rss>
